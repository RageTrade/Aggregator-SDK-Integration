/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace VaultTypes {
  export type VaultDepositFEStruct = {
    accountId: BytesLike
    brokerHash: BytesLike
    tokenHash: BytesLike
    tokenAmount: BigNumberish
  }

  export type VaultDepositFEStructOutput = [string, string, string, BigNumber] & {
    accountId: string
    brokerHash: string
    tokenHash: string
    tokenAmount: BigNumber
  }

  export type VaultWithdrawStruct = {
    accountId: BytesLike
    brokerHash: BytesLike
    tokenHash: BytesLike
    tokenAmount: BigNumberish
    fee: BigNumberish
    sender: string
    receiver: string
    withdrawNonce: BigNumberish
  }

  export type VaultWithdrawStructOutput = [string, string, string, BigNumber, BigNumber, string, string, BigNumber] & {
    accountId: string
    brokerHash: string
    tokenHash: string
    tokenAmount: BigNumber
    fee: BigNumber
    sender: string
    receiver: string
    withdrawNonce: BigNumber
  }
}

export declare namespace RebalanceTypes {
  export type RebalanceBurnCCDataStruct = {
    dstDomain: BigNumberish
    rebalanceId: BigNumberish
    amount: BigNumberish
    tokenHash: BytesLike
    srcChainId: BigNumberish
    dstChainId: BigNumberish
    dstVaultAddress: string
  }

  export type RebalanceBurnCCDataStructOutput = [number, BigNumber, BigNumber, string, BigNumber, BigNumber, string] & {
    dstDomain: number
    rebalanceId: BigNumber
    amount: BigNumber
    tokenHash: string
    srcChainId: BigNumber
    dstChainId: BigNumber
    dstVaultAddress: string
  }

  export type RebalanceMintCCDataStruct = {
    rebalanceId: BigNumberish
    amount: BigNumberish
    tokenHash: BytesLike
    srcChainId: BigNumberish
    dstChainId: BigNumberish
    messageBytes: BytesLike
    messageSignature: BytesLike
  }

  export type RebalanceMintCCDataStructOutput = [BigNumber, BigNumber, string, BigNumber, BigNumber, string, string] & {
    rebalanceId: BigNumber
    amount: BigNumber
    tokenHash: string
    srcChainId: BigNumber
    dstChainId: BigNumber
    messageBytes: string
    messageSignature: string
  }
}

export interface VaultInterface extends utils.Interface {
  functions: {
    'allowedToken(bytes32)': FunctionFragment
    'changeTokenAddressAndAllow(bytes32,address)': FunctionFragment
    'crossChainManagerAddress()': FunctionFragment
    'deposit((bytes32,bytes32,bytes32,uint128))': FunctionFragment
    'depositFeeEnabled()': FunctionFragment
    'depositId()': FunctionFragment
    'depositTo(address,(bytes32,bytes32,bytes32,uint128))': FunctionFragment
    'emergencyPause()': FunctionFragment
    'emergencyUnpause()': FunctionFragment
    'enableDepositFee(bool)': FunctionFragment
    'getAllAllowedBroker()': FunctionFragment
    'getAllAllowedToken()': FunctionFragment
    'getAllowedBroker(bytes32)': FunctionFragment
    'getAllowedToken(bytes32)': FunctionFragment
    'getDepositFee(address,(bytes32,bytes32,bytes32,uint128))': FunctionFragment
    'initialize()': FunctionFragment
    'messageTransmitterContract()': FunctionFragment
    'owner()': FunctionFragment
    'paused()': FunctionFragment
    'rebalanceBurn((uint32,uint64,uint128,bytes32,uint256,uint256,address))': FunctionFragment
    'rebalanceMint((uint64,uint128,bytes32,uint256,uint256,bytes,bytes))': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setAllowedBroker(bytes32,bool)': FunctionFragment
    'setAllowedToken(bytes32,bool)': FunctionFragment
    'setCrossChainManager(address)': FunctionFragment
    'setRebalanceMessengerContract(address)': FunctionFragment
    'setTokenMessengerContract(address)': FunctionFragment
    'tokenMessengerContract()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'withdraw((bytes32,bytes32,bytes32,uint128,uint128,address,address,uint64))': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowedToken'
      | 'changeTokenAddressAndAllow'
      | 'crossChainManagerAddress'
      | 'deposit'
      | 'depositFeeEnabled'
      | 'depositId'
      | 'depositTo'
      | 'emergencyPause'
      | 'emergencyUnpause'
      | 'enableDepositFee'
      | 'getAllAllowedBroker'
      | 'getAllAllowedToken'
      | 'getAllowedBroker'
      | 'getAllowedToken'
      | 'getDepositFee'
      | 'initialize'
      | 'messageTransmitterContract'
      | 'owner'
      | 'paused'
      | 'rebalanceBurn'
      | 'rebalanceMint'
      | 'renounceOwnership'
      | 'setAllowedBroker'
      | 'setAllowedToken'
      | 'setCrossChainManager'
      | 'setRebalanceMessengerContract'
      | 'setTokenMessengerContract'
      | 'tokenMessengerContract'
      | 'transferOwnership'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'allowedToken', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'changeTokenAddressAndAllow', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'crossChainManagerAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'deposit', values: [VaultTypes.VaultDepositFEStruct]): string
  encodeFunctionData(functionFragment: 'depositFeeEnabled', values?: undefined): string
  encodeFunctionData(functionFragment: 'depositId', values?: undefined): string
  encodeFunctionData(functionFragment: 'depositTo', values: [string, VaultTypes.VaultDepositFEStruct]): string
  encodeFunctionData(functionFragment: 'emergencyPause', values?: undefined): string
  encodeFunctionData(functionFragment: 'emergencyUnpause', values?: undefined): string
  encodeFunctionData(functionFragment: 'enableDepositFee', values: [boolean]): string
  encodeFunctionData(functionFragment: 'getAllAllowedBroker', values?: undefined): string
  encodeFunctionData(functionFragment: 'getAllAllowedToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'getAllowedBroker', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'getAllowedToken', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'getDepositFee', values: [string, VaultTypes.VaultDepositFEStruct]): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(functionFragment: 'messageTransmitterContract', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'rebalanceBurn', values: [RebalanceTypes.RebalanceBurnCCDataStruct]): string
  encodeFunctionData(functionFragment: 'rebalanceMint', values: [RebalanceTypes.RebalanceMintCCDataStruct]): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'setAllowedBroker', values: [BytesLike, boolean]): string
  encodeFunctionData(functionFragment: 'setAllowedToken', values: [BytesLike, boolean]): string
  encodeFunctionData(functionFragment: 'setCrossChainManager', values: [string]): string
  encodeFunctionData(functionFragment: 'setRebalanceMessengerContract', values: [string]): string
  encodeFunctionData(functionFragment: 'setTokenMessengerContract', values: [string]): string
  encodeFunctionData(functionFragment: 'tokenMessengerContract', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
  encodeFunctionData(functionFragment: 'withdraw', values: [VaultTypes.VaultWithdrawStruct]): string

  decodeFunctionResult(functionFragment: 'allowedToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeTokenAddressAndAllow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'crossChainManagerAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositFeeEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'emergencyPause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'emergencyUnpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'enableDepositFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAllAllowedBroker', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAllAllowedToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAllowedBroker', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAllowedToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDepositFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'messageTransmitterContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rebalanceBurn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rebalanceMint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAllowedBroker', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAllowedToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setCrossChainManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setRebalanceMessengerContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTokenMessengerContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenMessengerContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'AccountDeposit(bytes32,address,uint64,bytes32,uint128)': EventFragment
    'AccountDepositTo(bytes32,address,uint64,bytes32,uint128)': EventFragment
    'AccountWithdraw(bytes32,uint64,bytes32,address,address,bytes32,uint128,uint128)': EventFragment
    'ChangeCrossChainManager(address,address)': EventFragment
    'ChangeTokenAddressAndAllow(bytes32,address)': EventFragment
    'Initialized(uint8)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'SetAllowedBroker(bytes32,bool)': EventFragment
    'SetAllowedToken(bytes32,bool)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AccountDeposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AccountDepositTo'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AccountWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeCrossChainManager'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeTokenAddressAndAllow'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SetAllowedBroker'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SetAllowedToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface AccountDepositEventObject {
  accountId: string
  userAddress: string
  depositNonce: BigNumber
  tokenHash: string
  tokenAmount: BigNumber
}
export type AccountDepositEvent = TypedEvent<[string, string, BigNumber, string, BigNumber], AccountDepositEventObject>

export type AccountDepositEventFilter = TypedEventFilter<AccountDepositEvent>

export interface AccountDepositToEventObject {
  accountId: string
  userAddress: string
  depositNonce: BigNumber
  tokenHash: string
  tokenAmount: BigNumber
}
export type AccountDepositToEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  AccountDepositToEventObject
>

export type AccountDepositToEventFilter = TypedEventFilter<AccountDepositToEvent>

export interface AccountWithdrawEventObject {
  accountId: string
  withdrawNonce: BigNumber
  brokerHash: string
  sender: string
  receiver: string
  tokenHash: string
  tokenAmount: BigNumber
  fee: BigNumber
}
export type AccountWithdrawEvent = TypedEvent<
  [string, BigNumber, string, string, string, string, BigNumber, BigNumber],
  AccountWithdrawEventObject
>

export type AccountWithdrawEventFilter = TypedEventFilter<AccountWithdrawEvent>

export interface ChangeCrossChainManagerEventObject {
  oldAddress: string
  newAddress: string
}
export type ChangeCrossChainManagerEvent = TypedEvent<[string, string], ChangeCrossChainManagerEventObject>

export type ChangeCrossChainManagerEventFilter = TypedEventFilter<ChangeCrossChainManagerEvent>

export interface ChangeTokenAddressAndAllowEventObject {
  _tokenHash: string
  _tokenAddress: string
}
export type ChangeTokenAddressAndAllowEvent = TypedEvent<[string, string], ChangeTokenAddressAndAllowEventObject>

export type ChangeTokenAddressAndAllowEventFilter = TypedEventFilter<ChangeTokenAddressAndAllowEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface SetAllowedBrokerEventObject {
  _brokerHash: string
  _allowed: boolean
}
export type SetAllowedBrokerEvent = TypedEvent<[string, boolean], SetAllowedBrokerEventObject>

export type SetAllowedBrokerEventFilter = TypedEventFilter<SetAllowedBrokerEvent>

export interface SetAllowedTokenEventObject {
  _tokenHash: string
  _allowed: boolean
}
export type SetAllowedTokenEvent = TypedEvent<[string, boolean], SetAllowedTokenEventObject>

export type SetAllowedTokenEventFilter = TypedEventFilter<SetAllowedTokenEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: VaultInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    allowedToken(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>

    changeTokenAddressAndAllow(
      _tokenHash: BytesLike,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    crossChainManagerAddress(overrides?: CallOverrides): Promise<[string]>

    deposit(
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>

    depositFeeEnabled(overrides?: CallOverrides): Promise<[boolean]>

    depositId(overrides?: CallOverrides): Promise<[BigNumber]>

    depositTo(
      receiver: string,
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>

    emergencyPause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    emergencyUnpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    enableDepositFee(_enabled: boolean, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    getAllAllowedBroker(overrides?: CallOverrides): Promise<[string[]]>

    getAllAllowedToken(overrides?: CallOverrides): Promise<[string[]]>

    getAllowedBroker(_brokerHash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

    getAllowedToken(_tokenHash: BytesLike, overrides?: CallOverrides): Promise<[string]>

    getDepositFee(
      receiver: string,
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    initialize(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    messageTransmitterContract(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    rebalanceBurn(
      data: RebalanceTypes.RebalanceBurnCCDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    rebalanceMint(
      data: RebalanceTypes.RebalanceMintCCDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    setAllowedBroker(
      _brokerHash: BytesLike,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setAllowedToken(
      _tokenHash: BytesLike,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setCrossChainManager(
      _crossChainManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setRebalanceMessengerContract(
      _rebalanceMessengerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setTokenMessengerContract(
      _tokenMessengerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    tokenMessengerContract(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    withdraw(
      data: VaultTypes.VaultWithdrawStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>
  }

  allowedToken(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

  changeTokenAddressAndAllow(
    _tokenHash: BytesLike,
    _tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  crossChainManagerAddress(overrides?: CallOverrides): Promise<string>

  deposit(
    data: VaultTypes.VaultDepositFEStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>

  depositFeeEnabled(overrides?: CallOverrides): Promise<boolean>

  depositId(overrides?: CallOverrides): Promise<BigNumber>

  depositTo(
    receiver: string,
    data: VaultTypes.VaultDepositFEStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>

  emergencyPause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  emergencyUnpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  enableDepositFee(_enabled: boolean, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  getAllAllowedBroker(overrides?: CallOverrides): Promise<string[]>

  getAllAllowedToken(overrides?: CallOverrides): Promise<string[]>

  getAllowedBroker(_brokerHash: BytesLike, overrides?: CallOverrides): Promise<boolean>

  getAllowedToken(_tokenHash: BytesLike, overrides?: CallOverrides): Promise<string>

  getDepositFee(receiver: string, data: VaultTypes.VaultDepositFEStruct, overrides?: CallOverrides): Promise<BigNumber>

  initialize(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  messageTransmitterContract(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  rebalanceBurn(
    data: RebalanceTypes.RebalanceBurnCCDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  rebalanceMint(
    data: RebalanceTypes.RebalanceMintCCDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  setAllowedBroker(
    _brokerHash: BytesLike,
    _allowed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setAllowedToken(
    _tokenHash: BytesLike,
    _allowed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setCrossChainManager(
    _crossChainManagerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setRebalanceMessengerContract(
    _rebalanceMessengerContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setTokenMessengerContract(
    _tokenMessengerContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  tokenMessengerContract(overrides?: CallOverrides): Promise<string>

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  withdraw(
    data: VaultTypes.VaultWithdrawStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  callStatic: {
    allowedToken(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

    changeTokenAddressAndAllow(_tokenHash: BytesLike, _tokenAddress: string, overrides?: CallOverrides): Promise<void>

    crossChainManagerAddress(overrides?: CallOverrides): Promise<string>

    deposit(data: VaultTypes.VaultDepositFEStruct, overrides?: CallOverrides): Promise<void>

    depositFeeEnabled(overrides?: CallOverrides): Promise<boolean>

    depositId(overrides?: CallOverrides): Promise<BigNumber>

    depositTo(receiver: string, data: VaultTypes.VaultDepositFEStruct, overrides?: CallOverrides): Promise<void>

    emergencyPause(overrides?: CallOverrides): Promise<void>

    emergencyUnpause(overrides?: CallOverrides): Promise<void>

    enableDepositFee(_enabled: boolean, overrides?: CallOverrides): Promise<void>

    getAllAllowedBroker(overrides?: CallOverrides): Promise<string[]>

    getAllAllowedToken(overrides?: CallOverrides): Promise<string[]>

    getAllowedBroker(_brokerHash: BytesLike, overrides?: CallOverrides): Promise<boolean>

    getAllowedToken(_tokenHash: BytesLike, overrides?: CallOverrides): Promise<string>

    getDepositFee(
      receiver: string,
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(overrides?: CallOverrides): Promise<void>

    messageTransmitterContract(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    rebalanceBurn(data: RebalanceTypes.RebalanceBurnCCDataStruct, overrides?: CallOverrides): Promise<void>

    rebalanceMint(data: RebalanceTypes.RebalanceMintCCDataStruct, overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setAllowedBroker(_brokerHash: BytesLike, _allowed: boolean, overrides?: CallOverrides): Promise<void>

    setAllowedToken(_tokenHash: BytesLike, _allowed: boolean, overrides?: CallOverrides): Promise<void>

    setCrossChainManager(_crossChainManagerAddress: string, overrides?: CallOverrides): Promise<void>

    setRebalanceMessengerContract(_rebalanceMessengerContract: string, overrides?: CallOverrides): Promise<void>

    setTokenMessengerContract(_tokenMessengerContract: string, overrides?: CallOverrides): Promise<void>

    tokenMessengerContract(overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    withdraw(data: VaultTypes.VaultWithdrawStruct, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'AccountDeposit(bytes32,address,uint64,bytes32,uint128)'(
      accountId?: BytesLike | null,
      userAddress?: string | null,
      depositNonce?: BigNumberish | null,
      tokenHash?: null,
      tokenAmount?: null
    ): AccountDepositEventFilter
    AccountDeposit(
      accountId?: BytesLike | null,
      userAddress?: string | null,
      depositNonce?: BigNumberish | null,
      tokenHash?: null,
      tokenAmount?: null
    ): AccountDepositEventFilter

    'AccountDepositTo(bytes32,address,uint64,bytes32,uint128)'(
      accountId?: BytesLike | null,
      userAddress?: string | null,
      depositNonce?: BigNumberish | null,
      tokenHash?: null,
      tokenAmount?: null
    ): AccountDepositToEventFilter
    AccountDepositTo(
      accountId?: BytesLike | null,
      userAddress?: string | null,
      depositNonce?: BigNumberish | null,
      tokenHash?: null,
      tokenAmount?: null
    ): AccountDepositToEventFilter

    'AccountWithdraw(bytes32,uint64,bytes32,address,address,bytes32,uint128,uint128)'(
      accountId?: BytesLike | null,
      withdrawNonce?: BigNumberish | null,
      brokerHash?: null,
      sender?: null,
      receiver?: null,
      tokenHash?: null,
      tokenAmount?: null,
      fee?: null
    ): AccountWithdrawEventFilter
    AccountWithdraw(
      accountId?: BytesLike | null,
      withdrawNonce?: BigNumberish | null,
      brokerHash?: null,
      sender?: null,
      receiver?: null,
      tokenHash?: null,
      tokenAmount?: null,
      fee?: null
    ): AccountWithdrawEventFilter

    'ChangeCrossChainManager(address,address)'(oldAddress?: null, newAddress?: null): ChangeCrossChainManagerEventFilter
    ChangeCrossChainManager(oldAddress?: null, newAddress?: null): ChangeCrossChainManagerEventFilter

    'ChangeTokenAddressAndAllow(bytes32,address)'(
      _tokenHash?: BytesLike | null,
      _tokenAddress?: null
    ): ChangeTokenAddressAndAllowEventFilter
    ChangeTokenAddressAndAllow(
      _tokenHash?: BytesLike | null,
      _tokenAddress?: null
    ): ChangeTokenAddressAndAllowEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'SetAllowedBroker(bytes32,bool)'(_brokerHash?: BytesLike | null, _allowed?: null): SetAllowedBrokerEventFilter
    SetAllowedBroker(_brokerHash?: BytesLike | null, _allowed?: null): SetAllowedBrokerEventFilter

    'SetAllowedToken(bytes32,bool)'(_tokenHash?: BytesLike | null, _allowed?: null): SetAllowedTokenEventFilter
    SetAllowedToken(_tokenHash?: BytesLike | null, _allowed?: null): SetAllowedTokenEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    allowedToken(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    changeTokenAddressAndAllow(
      _tokenHash: BytesLike,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    crossChainManagerAddress(overrides?: CallOverrides): Promise<BigNumber>

    deposit(data: VaultTypes.VaultDepositFEStruct, overrides?: PayableOverrides & { from?: string }): Promise<BigNumber>

    depositFeeEnabled(overrides?: CallOverrides): Promise<BigNumber>

    depositId(overrides?: CallOverrides): Promise<BigNumber>

    depositTo(
      receiver: string,
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>

    emergencyPause(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    emergencyUnpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    enableDepositFee(_enabled: boolean, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    getAllAllowedBroker(overrides?: CallOverrides): Promise<BigNumber>

    getAllAllowedToken(overrides?: CallOverrides): Promise<BigNumber>

    getAllowedBroker(_brokerHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getAllowedToken(_tokenHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getDepositFee(
      receiver: string,
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    messageTransmitterContract(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    rebalanceBurn(
      data: RebalanceTypes.RebalanceBurnCCDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    rebalanceMint(
      data: RebalanceTypes.RebalanceMintCCDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    setAllowedBroker(
      _brokerHash: BytesLike,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setAllowedToken(
      _tokenHash: BytesLike,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setCrossChainManager(
      _crossChainManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setRebalanceMessengerContract(
      _rebalanceMessengerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setTokenMessengerContract(
      _tokenMessengerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    tokenMessengerContract(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    withdraw(data: VaultTypes.VaultWithdrawStruct, overrides?: Overrides & { from?: string }): Promise<BigNumber>
  }

  populateTransaction: {
    allowedToken(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    changeTokenAddressAndAllow(
      _tokenHash: BytesLike,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    crossChainManagerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deposit(
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>

    depositFeeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    depositId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    depositTo(
      receiver: string,
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>

    emergencyPause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    emergencyUnpause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    enableDepositFee(_enabled: boolean, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    getAllAllowedBroker(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAllAllowedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAllowedBroker(_brokerHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAllowedToken(_tokenHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getDepositFee(
      receiver: string,
      data: VaultTypes.VaultDepositFEStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    messageTransmitterContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rebalanceBurn(
      data: RebalanceTypes.RebalanceBurnCCDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    rebalanceMint(
      data: RebalanceTypes.RebalanceMintCCDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    setAllowedBroker(
      _brokerHash: BytesLike,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setAllowedToken(
      _tokenHash: BytesLike,
      _allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setCrossChainManager(
      _crossChainManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setRebalanceMessengerContract(
      _rebalanceMessengerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setTokenMessengerContract(
      _tokenMessengerContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    tokenMessengerContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    withdraw(
      data: VaultTypes.VaultWithdrawStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>
  }
}

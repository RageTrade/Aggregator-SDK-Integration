/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L1SocketDepositHelperInterface extends utils.Interface {
  functions: {
    "depositETHToAppChain(address,uint256,uint256,address,bytes)": FunctionFragment;
    "depositToAppChain(address,address,uint256,uint256,address,bytes)": FunctionFragment;
    "depositToAppChainWithPermit(address,address,uint256,uint256,address,bytes,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "updateVault(address,address)": FunctionFragment;
    "vaults(address)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositETHToAppChain"
      | "depositToAppChain"
      | "depositToAppChainWithPermit"
      | "owner"
      | "setOwner"
      | "updateVault"
      | "vaults"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositETHToAppChain",
    values: [string, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToAppChain",
    values: [string, string, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToAppChainWithPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateVault",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "depositETHToAppChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToAppChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToAppChainWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "OwnerUpdated(address,address)": EventFragment;
    "TokensDeposited(address,address,address,uint256,bytes)": EventFragment;
    "VaultUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultUpdated"): EventFragment;
}

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface TokensDepositedEventObject {
  connector: string;
  depositor: string;
  receiver: string;
  depositAmount: BigNumber;
  data: string;
}
export type TokensDepositedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  TokensDepositedEventObject
>;

export type TokensDepositedEventFilter = TypedEventFilter<TokensDepositedEvent>;

export interface VaultUpdatedEventObject {
  collateral: string;
  vault: string;
}
export type VaultUpdatedEvent = TypedEvent<
  [string, string],
  VaultUpdatedEventObject
>;

export type VaultUpdatedEventFilter = TypedEventFilter<VaultUpdatedEvent>;

export interface L1SocketDepositHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1SocketDepositHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositETHToAppChain(
      _receiver: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositToAppChain(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositToAppChainWithPermit(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateVault(
      _collateral: string,
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  depositETHToAppChain(
    _receiver: string,
    _amount: BigNumberish,
    _msgGasLimit: BigNumberish,
    _connector: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositToAppChain(
    _receiver: string,
    _asset: string,
    _amount: BigNumberish,
    _msgGasLimit: BigNumberish,
    _connector: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositToAppChainWithPermit(
    _receiver: string,
    _asset: string,
    _amount: BigNumberish,
    _msgGasLimit: BigNumberish,
    _connector: string,
    _data: BytesLike,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateVault(
    _collateral: string,
    _vault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vaults(arg0: string, overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    depositETHToAppChain(
      _receiver: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToAppChain(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToAppChainWithPermit(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateVault(
      _collateral: string,
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;

    "TokensDeposited(address,address,address,uint256,bytes)"(
      connector?: string | null,
      depositor?: string | null,
      receiver?: string | null,
      depositAmount?: null,
      data?: null
    ): TokensDepositedEventFilter;
    TokensDeposited(
      connector?: string | null,
      depositor?: string | null,
      receiver?: string | null,
      depositAmount?: null,
      data?: null
    ): TokensDepositedEventFilter;

    "VaultUpdated(address,address)"(
      collateral?: string | null,
      vault?: string | null
    ): VaultUpdatedEventFilter;
    VaultUpdated(
      collateral?: string | null,
      vault?: string | null
    ): VaultUpdatedEventFilter;
  };

  estimateGas: {
    depositETHToAppChain(
      _receiver: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositToAppChain(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositToAppChainWithPermit(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateVault(
      _collateral: string,
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositETHToAppChain(
      _receiver: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositToAppChain(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositToAppChainWithPermit(
      _receiver: string,
      _asset: string,
      _amount: BigNumberish,
      _msgGasLimit: BigNumberish,
      _connector: string,
      _data: BytesLike,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateVault(
      _collateral: string,
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/assets": {
    /**
     * GET /assets
     * @description Returns the list of active underlying assets.
     */
    get: operations["GetAssets"];
  };
  "/expiries": {
    /**
     * GET /expiries
     * @description Returns the expiry timestamps of derivatives of the given asset.
     */
    get: operations["GetExpiries"];
  };
  "/index": {
    /**
     * GET /index
     * @description Returns the current index price of the given asset.
     */
    get: operations["GetIndex"];
  };
  "/index-history": {
    /**
     * GET /index-history
     * @description Returns the historical index price for a given asset.
     */
    get: operations["GetIndexHistory"];
  };
  "/mark-history": {
    /**
     * GET /mark-history
     * @description Returns the historical mark prices for a given instrument.
     */
    get: operations["GetMarkHistory"];
  };
  "/settlement-history": {
    /**
     * GET /settlement-history
     * @description Returns the historical settlement prices for a given asset.
     */
    get: operations["GetSettlementHistory"];
  };
  "/markets": {
    /**
     * GET /markets
     * @description Returns a list of instruments. If `asset` is not specified, the response will include all listed instruments.
     */
    get: operations["GetMarkets"];
  };
  "/statistics": {
    /**
     * GET /statistics
     * @description Returns the market statistics for the given asset.
     */
    get: operations["GetStatistics"];
  };
  "/coingecko-statistics": {
    /**
     * GET /coingecko-statistics
     * @description Returns the perpetual statistics of all assets specifically for https://www.coingecko.com/en/exchanges/aevo
     */
    get: operations["GetCoingeckoStatistics"];
  };
  "/orderbook": {
    /**
     * GET /orderbook
     * @description Returns the orderbook for a given symbol.
     */
    get: operations["GetOrderbook"];
  };
  "/funding": {
    /**
     * GET /funding
     * @description Returns the current funding rate for the instrument.
     */
    get: operations["GetFunding"];
  };
  "/funding-history": {
    /**
     * GET /funding-history
     * @description Returns the funding rate history for the instrument.
     */
    get: operations["GetFundingHistory"];
  };
  "/instrument/{instrument_name}": {
    /**
     * GET /instrument/{instrument_name}
     * @description Returns the instrument information for the given instrument.
     */
    get: operations["GetInstrumentInstrumentName"];
  };
  "/instrument/{instrument_name}/trade-history": {
    /**
     * GET /instrument/{instrument_name}/trade-history
     * @description Returns the trade history for the given instrument.
     */
    get: operations["GetInstrumentInstrumentNameTradeHistory"];
  };
  "/check-referral": {
    /**
     * GET /check-referral
     * @description Check if user can be referred.
     */
    get: operations["GetCheckReferral"];
  };
  "/account/unsubscribe": {
    /**
     * POST /account/unsubscribe
     * @description Unsubscribe from all email preferences
     */
    post: operations["PostAccountUnsubscribe"];
  };
  "/time": {
    /**
     * GET /time
     * @description Returns the server time
     */
    get: operations["GetTime"];
  };
  "/yield-vault": {
    /**
     * GET /yield-vault
     * @description Returns the yield vault information for the given yield vault.
     */
    get: operations["GetYieldVault"];
  };
  "/swap/preview": {
    /**
     * POST /swap/preview
     * @description Previews a collateral swap
     */
    post: operations["PostSwapPreview"];
  };
  "/status": {
    /**
     * INTERNAL GET /status
     * @description Returns the exchange status.
     */
    get: operations["GetStatus"];
  };
  "/options-chain": {
    /**
     * INTERNAL GET /options-chain
     * @description Returns the options chain for a given asset and expiry.
     */
    get: operations["GetOptionsChain"];
  };
  "/options-history": {
    /**
     * GET /options-history
     * @description Returns the trade history for group of instrument.
     */
    get: operations["GetOptionsHistory"];
  };
  "/index-histories": {
    /**
     * INTERNAL GET /index-histories
     * @description Returns the historical index price for an array of assets.
     */
    get: operations["GetIndexHistories"];
  };
  "/check-restricted": {
    /**
     * INTERNAL GET /check-restricted
     * @description Returns the restriction status of the IP address calling the API.
     */
    get: operations["GetCheckRestricted"];
  };
  "/leaderboard": {
    /**
     * INTERNAL GET /leaderboard
     * @description Returns the leaderboard for a given instrument type.
     */
    get: operations["GetLeaderboard"];
  };
  "/markets-summary": {
    /**
     * INTERNAL GET /markets-summary
     * @description Returns the market summary for the given asset. Used to populate the markets dropdown in the app
     */
    get: operations["GetMarketsSummary"];
  };
  "/socket/capacity": {
    /**
     * INTERNAL GET /socket/capacity
     * @description Returns all account's orders.
     */
    get: operations["GetSocketCapacity"];
  };
  "/register": {
    /**
     * POST /register
     * @description Registers a new account.
     */
    post: operations["PostRegister"];
  };
  "/api-key": {
    /**
     * GET /api-key
     * @description Returns the API key information.
     */
    get: operations["GetApiKey"];
    /**
     * POST /api-key
     * @description Creates a new API key.
     */
    post: operations["PostApiKey"];
    /**
     * DELETE /api-key
     * @description Removes the account's API key. This logs out the account.
     */
    delete: operations["DeleteApiKey"];
  };
  "/signing-key": {
    /**
     * DELETE /signing-key
     * @description Removes the account's signing key. This logs out the account.
     */
    delete: operations["DeleteSigningKey"];
  };
  "/auth": {
    /**
     * GET /auth
     * @description Returns true if the given headers has valid authentication
     */
    get: operations["GetAuth"];
  };
  "/account": {
    /**
     * GET /account
     * @description Returns the account's information including API keys, signing keys and positions.
     */
    get: operations["GetAccount"];
  };
  "/positions": {
    /**
     * GET /positions
     * @description Returns the account's positions
     */
    get: operations["GetPositions"];
  };
  "/account/cancel-on-disconnect": {
    /**
     * GET /account/cancel-on-disconnect
     * @description Check the Cancel on Disconnect (CoD) setting for your account.
     */
    get: operations["GetAccountCancelOnDisconnect"];
    /**
     * POST /account/cancel-on-disconnect
     * @description Enables or disables the Cancel on Disconnect (CoD) setting for your account. When CoD is enabled, when a websocket connection is closed, all orders placed via that connection will be cancelled.
     */
    post: operations["PostAccountCancelOnDisconnect"];
  };
  "/account/portfolio-margin": {
    /**
     * POST /account/portfolio-margin
     * @description Enables or disables the portfolio margin on your acccount.
     */
    post: operations["PostAccountPortfolioMargin"];
  };
  "/account/email-address": {
    /**
     * GET /account/email-address
     * @description Check the Email Address for your account.
     */
    get: operations["GetAccountEmailAddress"];
    /**
     * POST /account/email-address
     * @description Sets up an email address for a user.
     */
    post: operations["PostAccountEmailAddress"];
  };
  "/account/email-preference": {
    /**
     * POST /account/email-preference
     * @description Sets up email preference for a user.
     */
    post: operations["PostAccountEmailPreference"];
  };
  "/account/email-preferences": {
    /**
     * GET /account/email-preferences
     * @description Check the email preferences for your account.
     */
    get: operations["GetAccountEmailPreferences"];
  };
  "/account/email-verified": {
    /**
     * GET /account/email-verified
     * @description Check if an account's email is verified.
     */
    get: operations["GetAccountEmailVerified"];
    /**
     * POST /account/email-verified
     * @description Verify an account's email.
     */
    post: operations["PostAccountEmailVerified"];
  };
  "/account/accumulated-fundings": {
    /**
     * GET /account/accumulated-fundings
     * @description Get the accumulated funding for your account's positions.
     */
    get: operations["GetAccountAccumulatedFundings"];
  };
  "/account/update-margin": {
    /**
     * POST /account/update-margin
     * @description Update margin for your account's positions.
     */
    post: operations["PostAccountUpdateMargin"];
  };
  "/account/margin-type": {
    /**
     * POST /account/margin-type
     * @description Update margin for your account's positions.
     */
    post: operations["PostAccountMarginType"];
  };
  "/account/leverage": {
    /**
     * POST /account/leverage
     * @description Set the leverage of an instrument for your account.
     */
    post: operations["PostAccountLeverage"];
  };
  "/portfolio": {
    /**
     * GET /portfolio
     * @description Returns the overall portfolio details of the account.
     */
    get: operations["GetPortfolio"];
  };
  "/withdraw": {
    /**
     * POST /withdraw
     * @description Withdraws USDC from the exchange to L1 Ethereum.
     */
    post: operations["PostWithdraw"];
  };
  "/strategy/initiate-withdraw": {
    /**
     * POST /strategy/initiate-withdraw
     * @description Initiate a USDC withdraw from strategy.
     */
    post: operations["PostStrategyInitiateWithdraw"];
  };
  "/strategy/pending-transactions": {
    /**
     * POST /strategy/pending-transactions
     * @description Get a type of pending transactions of a strategy
     */
    post: operations["PostStrategyPendingTransactions"];
  };
  "/transfer": {
    /**
     * POST /transfer
     * @description Transfer USDC between accounts.
     */
    post: operations["PostTransfer"];
  };
  "/orders": {
    /**
     * GET /orders
     * @description Returns all account's orders.
     */
    get: operations["GetOrders"];
    /**
     * POST /orders
     * @description Creates a new order.
     */
    post: operations["PostOrders"];
  };
  "/orders/{order_id}": {
    /**
     * GET /orders/{order_id}
     * @description Returns the order details.
     */
    get: operations["GetOrdersOrderId"];
    /**
     * POST /orders/{order_id}
     * @description Edits an existing order.
     */
    post: operations["PostOrdersOrderId"];
    /**
     * DELETE /orders/{order_id}
     * @description Cancels an order.
     */
    delete: operations["DeleteOrdersOrderId"];
  };
  "/orders-all": {
    /**
     * DELETE /orders-all
     * @description Cancel all orders. Optionally, you can specify an asset and instrument type to cancel only orders for that asset/instrument type.
     */
    delete: operations["DeleteOrdersAll"];
  };
  "/order-history": {
    /**
     * GET /order-history
     * @description Returns order history for the account.
     */
    get: operations["GetOrderHistory"];
  };
  "/order-history/stops": {
    /**
     * GET /order-history/stops
     * @description Returns stop order history for the account.
     */
    get: operations["GetOrderHistoryStops"];
  };
  "/trade-history": {
    /**
     * GET /trade-history
     * @description Return the account's trade history.
     */
    get: operations["GetTradeHistory"];
  };
  "/transaction-history": {
    /**
     * GET /transaction-history
     * @description Return the account's deposit and withdraw history.
     */
    get: operations["GetTransactionHistory"];
  };
  "/referral-rewards-history": {
    /**
     * GET /referral-rewards-history
     * @description Return the account's referral rewards history.
     */
    get: operations["GetReferralRewardsHistory"];
  };
  "/referral-history": {
    /**
     * GET /referral-history
     * @description Return the account's referral history.
     */
    get: operations["GetReferralHistory"];
  };
  "/referral-statistics": {
    /**
     * GET /referral-statistics
     * @description Return the account's referral statistics.
     */
    get: operations["GetReferralStatistics"];
  };
  "/claim-referral-rewards": {
    /**
     * POST /claim-referral-rewards
     * @description User claims referral rewards
     */
    post: operations["PostClaimReferralRewards"];
  };
  "/mmp": {
    /**
     * GET /mmp
     * @description Get market maker protection (MMP) setting.
     */
    get: operations["GetMmp"];
    /**
     * POST /mmp
     * @description Sets market maker protection (MMP) settings.
     */
    post: operations["PostMmp"];
  };
  "/reset-mmp": {
    /**
     * POST /reset-mmp
     * @description Reset market maker protection (MMP).
     */
    post: operations["PostResetMmp"];
  };
  "/rfqs": {
    /**
     * GET /rfqs
     * @description Get RFQ blocks open for trading.
     */
    get: operations["GetRfqs"];
    /**
     * POST /rfqs
     * @description Create a new RFQ block.
     */
    post: operations["PostRfqs"];
    /**
     * DELETE /rfqs
     * @description Cancel all blocks.
     */
    delete: operations["DeleteRfqs"];
  };
  "/rfqs/{block_id}": {
    /**
     * DELETE /rfqs/{block_id}
     * @description Close an RFQ block
     */
    delete: operations["DeleteRfqsBlockId"];
  };
  "/rfqs/{block_id}/quotes": {
    /**
     * GET /rfqs/{block_id}/quotes
     * @description Get the quotes for a given RFQ block.
     */
    get: operations["GetRfqsBlockIdQuotes"];
  };
  "/quotes": {
    /**
     * GET /quotes
     * @description Returns all account's quotes.
     */
    get: operations["GetQuotes"];
    /**
     * POST /quotes
     * @description Creates a new quote.
     */
    post: operations["PostQuotes"];
    /**
     * DELETE /quotes
     * @description Cancel multiple quotes.
     */
    delete: operations["DeleteQuotes"];
  };
  "/quotes/preview": {
    /**
     * POST /quotes/preview
     * @description Simulate a new quote.
     */
    post: operations["PostQuotesPreview"];
  };
  "/quotes/{quote_id}": {
    /**
     * PUT /quotes/{quote_id}
     * @description Edits an existing quote.
     */
    put: operations["PutQuotesQuoteId"];
    /**
     * DELETE /quotes/{quote_id}
     * @description Cancels an quote.
     */
    delete: operations["DeleteQuotesQuoteId"];
  };
  "/block-history": {
    /**
     * INTERNAL GET /block-history
     * @description Return the account's block history.
     */
    get: operations["GetBlockHistory"];
  };
  "/quote-history": {
    /**
     * INTERNAL GET /quote-history
     * @description Return the account's quote history.
     */
    get: operations["GetQuoteHistory"];
  };
  "/block-trade-history": {
    /**
     * INTERNAL GET /block-trade-history
     * @description Return the account's block trade history.
     */
    get: operations["GetBlockTradeHistory"];
  };
  "/swap": {
    /**
     * POST /swap
     * @description Swaps collateral.
     */
    post: operations["PostSwap"];
  };
  "/analytics": {
    /**
     * INTERNAL GET /analytics
     * @description Analytics for authenticated accounts
     */
    get: operations["GetAnalytics"];
  };
  "/margin": {
    /**
     * INTERNAL GET /margin
     * @description Get the margin requirement.
     */
    get: operations["GetMargin"];
  };
  "/balance-history": {
    /**
     * INTERNAL GET /balance-history
     * @description Return the account's balance history.
     */
    get: operations["GetBalanceHistory"];
  };
  "/notifications": {
    /**
     * INTERNAL GET /notifications
     * @description Returns the account's notification history.
     */
    get: operations["GetNotifications"];
  };
  "/mark-as-read": {
    /**
     * INTERNAL POST /mark-as-read
     * @description Mark the notifications for the account as read.
     */
    post: operations["PostMarkAsRead"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * account
     * @description Account's Ethereum address.
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    account: string;
    /**
     * account_response
     * @description Account's Ethereum address. Eg. `0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b`
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    account_response: string;
    /**
     * account_signature
     * @description Hash of EIP-712 signature signed by the account.
     * @example 0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91
     */
    account_signature: string;
    /**
     * account_type_response
     * @description Account type. Eg. `STANDARD`
     * @enum {string}
     */
    account_type_response: "STANDARD" | "MARKET_MAKER" | "MANAGED_ACCOUNT";
    /**
     * accumulated_funding_response
     * @description Accumulated funding for an account's perp position. Eg. `0.00005`
     * @example 0.00005
     */
    accumulated_funding_response: string;
    /**
     * agg_order_id_response
     * @description Aggressor Order ID. Eg. `0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8`
     * @example 0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8
     */
    agg_order_id_response: string;
    /**
     * aggressing_quote_id_response
     * @description Quote ID of the aggressor Eg. `0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8`
     * @example 0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8
     */
    aggressing_quote_id_response: string;
    /**
     * amount
     * @description Number of contracts. In 6 decimals fixed number.
     * @example 1000000
     */
    amount: string;
    /**
     * amount__swap_preview_response
     * @description The base amount Eg. `1`
     * @example 1
     */
    amount__swap_preview_response: string;
    /**
     * amount_change_response
     * @description Change in filled contract amounts within the interval. Eg. `0.1`
     * @example 0.1
     */
    amount_change_response: string;
    /**
     * amount_float
     * @description Amount in shares. Unsigned float string.
     * @example 12.23
     */
    amount_float: number;
    /**
     * amount_limit
     * @description Amount limit setting for market maker protection (MMP). In 6 decimals fixed number.
     * @example 1000000
     */
    amount_limit: string;
    /**
     * amount_limit_response
     * @description Amount limit setting for market maker protection (MMP). In 6 decimals fixed number. Eg. `1000000`
     * @example 1000000
     */
    amount_limit_response: string;
    /**
     * amount_precision_response
     * @description Allowed increments in contract amount. Eg. `0.1`
     * @example 0.1
     */
    amount_precision_response: string;
    /**
     * amount_response
     * @description Number of contracts. In 6 decimals fixed number. Eg. `1000000`
     * @example 1000000
     */
    amount_response: string;
    /**
     * amount_step_response
     * @description Allowed increments in contract amount. Eg. `0.1`
     * @example 0.1
     */
    amount_step_response: string;
    /**
     * amount_type_response
     * @description Type of amount provided when reading pending strategy transactions Eg. `SHARES`
     * @enum {string}
     */
    amount_type_response: "SHARES" | "DOLLARS";
    /**
     * amount_usdc
     * @description Amount in USDC. In 6 decimals fixed number.
     * @example 1000000
     */
    amount_usdc: string;
    /**
     * api_key
     * @description Account's API Key.
     * @example URPtt6eNCXgL8ERuchphUretdaga2smF
     */
    api_key: string;
    /**
     * api_key_response
     * @description Account's API Key. Eg. `URPtt6eNCXgL8ERuchphUretdaga2smF`
     * @example URPtt6eNCXgL8ERuchphUretdaga2smF
     */
    api_key_response: string;
    /**
     * api_secret_response
     * @description Client's API Secret Eg. `0140af7046a63530fc4bd319823d6eee98086ef0d446584b42f68b640b60c457`
     * @example 0140af7046a63530fc4bd319823d6eee98086ef0d446584b42f68b640b60c457
     */
    api_secret_response: string;
    /**
     * apy_response
     * @description Annualized Percentage Return of a yield vault or strategy Eg. `12`
     * @example 12
     */
    apy_response: string;
    /**
     * asks_response
     * @description Array of 3 elements, price in USD, contract amount, and IV respectively. Eg. `[1 100 12]`
     * @example [
     *   "1",
     *   "100",
     *   "12"
     * ]
     */
    asks_response: string[];
    /**
     * asset
     * @description Name of underlying asset.
     * @example ETH
     */
    asset: string;
    /**
     * asset_response
     * @description Name of underlying asset. Eg. `ETH`
     * @example ETH
     */
    asset_response: string;
    /**
     * aum_liquid_response
     * @description Liquid AUM of a strategy Eg. `12`
     * @example 12
     */
    aum_liquid_response: string;
    /**
     * aum_response
     * @description AUM of a strategy Eg. `12`
     * @example 12
     */
    aum_response: string;
    /**
     * available_balance_response
     * @description Available balance. Eg. `12.23`
     * @example 12.23
     */
    available_balance_response: string;
    /**
     * avg_entry_price_response
     * @description Average entry price. Eg. `12.23`
     * @example 12.23
     */
    avg_entry_price_response: string;
    /**
     * avg_price_response
     * @description Average entry price of the position. Eg. `12.23`
     * @example 12.23
     */
    avg_price_response: string;
    /**
     * balance_response
     * @description Balance. Eg. `12.23`
     * @example 12.23
     */
    balance_response: string;
    /**
     * base_amount
     * @description The collateral amount. In 6 decimals fixed number for USDT, 18 decimals for WETH, and 8 decimals for WBTC.
     * @example 1000000
     */
    base_amount: string;
    /**
     * base_balance_response
     * @description The collateral balance. Eg. `12.23`
     * @example 12.23
     */
    base_balance_response: string;
    /**
     * base_capacity_response
     * @description The collateral swap capacity balance. Eg. `12.23`
     * @example 12.23
     */
    base_capacity_response: string;
    /**
     * base_currency_response
     * @description Symbol/currency code of base pair Eg. `BTC`
     * @example BTC
     */
    base_currency_response: string;
    /**
     * bids_response
     * @description Array of 3 elements, price in USD, contract amount, and IV respectively. Eg. `[1 100 12]`
     * @example [
     *   "1",
     *   "100",
     *   "12"
     * ]
     */
    bids_response: string[];
    /**
     * block_id
     * @description Block ID is the unique identifier of the block
     * @example 0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8
     */
    block_id: string;
    /**
     * block_id_response
     * @description Block ID is the unique identifier of the block Eg. `0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8`
     * @example 0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8
     */
    block_id_response: string;
    /**
     * block_response
     * @description 1366770 Eg. `2023-08-24 07:15:51.448450894 +0000 UTC`
     * @example 2023-08-24 07:15:51.448450894 +0000 UTC
     */
    block_response: string;
    /**
     * block_status_response
     * @description Status of the RFQ block Eg. `<nil>`
     * @enum {string}
     */
    block_status_response: "open" | "closed";
    /**
     * block_trade_id_response
     * @description Unique ID of the block trade. Eg. `DwmDn5XnEyiqx5AB5CM4W8bgD137ASX4Lz1XWBYqvpX2`
     * @example DwmDn5XnEyiqx5AB5CM4W8bgD137ASX4Lz1XWBYqvpX2
     */
    block_trade_id_response: string;
    /**
     * calls_response
     * @description Call options open interest in number of contracts. Eg. `1234.56`
     * @example 1234.56
     */
    calls_response: string;
    /**
     * cap_response
     * @description Capacity of a strategy Eg. `12`
     * @example 12
     */
    cap_response: string;
    /**
     * capacity_response
     * @description The withdrawal capacity for a destination chain. Eg. `1000000`
     * @example 1000000
     */
    capacity_response: string;
    /**
     * chain_id_response
     * @description The specified chain ID. Eg. `10`
     * @example 10
     */
    chain_id_response: string;
    /**
     * checksum_response
     * @description Payload checksum. Eg. `8479283742`
     * @example 8479283742
     */
    checksum_response: string;
    /**
     * close_position
     * @description Is order a close position TPSL order.
     * @example true
     */
    close_position: boolean;
    /**
     * close_position_response
     * @description Is order a close position TPSL order. Eg. `true`
     * @example true
     */
    close_position_response: boolean;
    /**
     * code_response
     * @description Error code string of why user cannot be referred by a specific referral-code Eg. `User has already been referred`
     * @example User has already been referred
     */
    code_response: string;
    /**
     * collateral
     * @description Ethereum address of the collateral asset.
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    collateral: string;
    /**
     * collateral_asset
     * @description Name of the collateral asset.
     * @enum {string}
     */
    collateral_asset: "USDC" | "USDT" | "WETH" | "WBTC" | "aeUSD" | "SDAI";
    /**
     * collateral_asset_response
     * @description Name of the collateral asset. Eg. `USDT`
     * @enum {string}
     */
    collateral_asset_response: "USDC" | "USDT" | "WETH" | "WBTC" | "aeUSD" | "SDAI";
    /**
     * collateral_response
     * @description Ethereum address of the collateral asset. Eg. `0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b`
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    collateral_response: string;
    /**
     * collateral_value_response
     * @description Value of the collateral in USD Eg. `10423`
     * @example 10423
     */
    collateral_value_response: string;
    /**
     * collateral_yield_bearing_response
     * @description If collateral asset is yield bearing Eg. `false`
     * @example false
     */
    collateral_yield_bearing_response: boolean;
    /**
     * commission_response
     * @description Commission for a referral Eg. `0.1`
     * @example 0.1
     */
    commission_response: string;
    /**
     * contract_price_currency_response
     * @description Describes the currency which the contract is priced in. Eg. `USD`
     * @example USD
     */
    contract_price_currency_response: string;
    /**
     * contract_type_response
     * @description Type of contract - Vanilla, Inverse or Quanto Eg. `Vanilla`
     * @example Vanilla
     */
    contract_type_response: string;
    /**
     * count_response
     * @description total number of rows in a query Eg. `5`
     * @example 5
     */
    count_response: string;
    /**
     * counter_party_response
     * @description Counter party address of a transfer transaction. Eg. `0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b`
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    counter_party_response: string;
    /**
     * counterparties
     * @description List of counterparties allowed to quote for the RFQ block
     * @example [
     *   "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
     *   "0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b"
     * ]
     */
    counterparties: string[];
    /**
     * country_response
     * @description Name of the country Eg. `United States of America`
     * @example United States of America
     */
    country_response: string;
    /**
     * created_timestamp_response
     * @description Created timestamp in UNIX timestamp in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    created_timestamp_response: string;
    /**
     * credit_response
     * @description Credits in USDC Eg. `100.00`
     * @example 100.00
     */
    credit_response: string;
    /**
     * credited_response
     * @description Whether account has been credited using the automatic credit system Eg. `true`
     * @example true
     */
    credited_response: boolean;
    /**
     * daily_buy_volume_response
     * @description 24-hour buy notional volume in USD terms. Eg. `1234.56`
     * @example 1234.56
     */
    daily_buy_volume_response: string;
    /**
     * daily_sell_volume_response
     * @description 24-hour sell notional volume in USD terms. Eg. `1234.56`
     * @example 1234.56
     */
    daily_sell_volume_response: string;
    /**
     * daily_volume_contracts_response
     * @description 24-hour traded volume in contract terms. Eg. `1234.5`
     * @example 1234.5
     */
    daily_volume_contracts_response: string;
    /**
     * daily_volume_premium_response
     * @description 24-hour traded premium volume in USD terms. Eg. `1234.56`
     * @example 1234.56
     */
    daily_volume_premium_response: string;
    /**
     * daily_volume_response
     * @description 24-hour traded notional volume in USD terms. Eg. `1234.56`
     * @example 1234.56
     */
    daily_volume_response: string;
    /**
     * deadline_response
     * @description Deadline of the RFQ block in UNIX timestamp in nanoseconds Eg. `<nil>`
     */
    deadline_response: string;
    /**
     * delta_change_response
     * @description Change in delta within the interval. Eg. `0.1`
     * @example 0.1
     */
    delta_change_response: string;
    /**
     * delta_limit
     * @description Delta limit setting for market maker protection (MMP). In unsigned float.
     * @example 0.1
     */
    delta_limit: number;
    /**
     * delta_limit_response
     * @description Delta limit setting for market maker protection (MMP). In unsigned float. Eg. `0.1`
     * @example 0.1
     */
    delta_limit_response: string;
    /**
     * delta_response
     * @description Option's Delta. Eg. `0.23`
     * @example 0.23
     */
    delta_response: string;
    /**
     * description_response
     * @description Reward description Eg. `Taker Rewards`
     * @example Taker Rewards
     */
    description_response: string;
    /**
     * duration
     * @description Duration of the RFQ block in seconds
     * @example 30
     */
    duration: number;
    /**
     * duration_response
     * @description Duration of the RFQ block in seconds Eg. `30`
     * @example 30
     */
    duration_response: string;
    /**
     * email_address
     * @description Email address of an account.
     * @example timothy@ribbon.finance
     */
    email_address: string;
    /**
     * email_address_response
     * @description Email address of an account. Eg. `timothy@ribbon.finance`
     * @example timothy@ribbon.finance
     */
    email_address_response: string;
    /**
     * email_auth_token
     * @description Authorization Token for email verification
     * @example jrihaeorh
     */
    email_auth_token: string;
    /**
     * email_preferences_response
     * @description A user's email preferences Eg. ``
     * @example
     */
    email_preferences_response: string;
    /**
     * email_type
     * @description Email type in an email preferences objject.
     * @example liquidation
     */
    email_type: string;
    /**
     * email_verified_response
     * @description Whether account email is verified. Eg. `false`
     * @example false
     */
    email_verified_response: boolean;
    /**
     * enabled
     * @description Enabled if true.
     * @example true
     */
    enabled: boolean;
    /**
     * enabled_response
     * @description Enabled if true. Eg. `true`
     * @example true
     */
    enabled_response: boolean;
    /**
     * entry_price_response
     * @description Settlement entry price. Signed float string. Eg. `12.23`
     * @example 12.23
     */
    entry_price_response: string;
    /**
     * equity_response
     * @description Account's equity. Eg. `12.23`
     * @example 12.23
     */
    equity_response: string;
    /**
     * error_400_response
     * @description Error message. Eg. `ERR_MALFORMED_REQUEST`
     * @example ERR_MALFORMED_REQUEST
     */
    error_400_response: string;
    /**
     * error_401_response
     * @description Error message. Eg. `UNAUTHORIZED`
     * @example UNAUTHORIZED
     */
    error_401_response: string;
    /**
     * error_429_response
     * @description Error message. Eg. `RATE_LIMIT_EXCEEDED`
     * @example RATE_LIMIT_EXCEEDED
     */
    error_429_response: string;
    /**
     * error_500_response
     * @description Error message. Eg. `INTERNAL_ERROR`
     * @example INTERNAL_ERROR
     */
    error_500_response: string;
    /**
     * error_response
     * @description The error code for a failed trade Eg. `IOC_ORDER_REJECTED`
     * @example IOC_ORDER_REJECTED
     */
    error_response: string;
    /**
     * exchange_status_response
     * @description Exchange status. Eg. ``
     * @enum {string}
     */
    exchange_status_response: "Live" | "Maintenance";
    /**
     * expiry
     * @description Signing key expiry in UNIX timestamp in seconds.
     * @example 1685520000
     */
    expiry: string;
    /**
     * expiry_response
     * @description Option expiry in UNIX timestamp in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    expiry_response: string;
    /**
     * fee_rate_response
     * @description Funding fee rate in decimals. Only applies to funding trade type. Eg. `0.000065`
     * @example 0.000065
     */
    fee_rate_response: string;
    /**
     * fees_response
     * @description Fees paid for the trade. Eg. `12.23`
     * @example 12.23
     */
    fees_response: string;
    /**
     * filled_response
     * @description Amount filled. Eg. `12.23`
     * @example 12.23
     */
    filled_response: string;
    /**
     * finalized_timestamp_response
     * @description Timestamp where transaction is finalized in UNIX timestamp in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    finalized_timestamp_response: string;
    /**
     * forward_price_response
     * @description Current forward price of the asset. Eg. `12.23`
     * @example 12.23
     */
    forward_price_response: string;
    /**
     * frozen
     * @description Duration in seconds during which the account will be frozen. If set to 0, manual reset is required.
     * @example 30
     */
    frozen: number;
    /**
     * frozen_end_time_response
     * @description End time in nanoseconds where the account will be unfrozen. Eg. `1683697928273737203`
     * @example 1683697928273737203
     */
    frozen_end_time_response: string;
    /**
     * frozen_response
     * @description Duration in seconds during which the account will be frozen. If set to 0, manual reset is required. Eg. `30`
     * @example 30
     */
    frozen_response: string;
    /**
     * full_size
     * @description Full size only if true.
     * @example true
     */
    full_size: boolean;
    /**
     * full_size_response
     * @description Full size only if true. Eg. `true`
     * @example true
     */
    full_size_response: boolean;
    /**
     * funding_daily_avg_response
     * @description 24-hour average of the funding rate of the instrument. Eg. `12.52`
     * @example 12.52
     */
    funding_daily_avg_response: string;
    /**
     * funding_history_response
     * @description List of [instrument name, timestamp, funding rate, mark price]. Timestamp is in UNIX nanoseconds. Funding rate is in decimals. Eg. `[ETH-PERP 1680249600000000000 0.000123 1892.82]`
     * @example [
     *   "ETH-PERP",
     *   "1680249600000000000",
     *   "0.000123",
     *   "1892.82"
     * ]
     */
    funding_history_response: string[];
    /**
     * funding_rate_response
     * @description Funding rate in decimals. Eg. `0.00122`
     * @example 0.00122
     */
    funding_rate_response: string;
    /**
     * gamma_response
     * @description Option's Gamma. Eg. `0.23`
     * @example 0.23
     */
    gamma_response: string;
    /**
     * has_been_referred_response
     * @description Whether account has been referred by another account Eg. `true`
     * @example true
     */
    has_been_referred_response: boolean;
    /**
     * history_response
     * @description List of [timestamp, price]. Timestamp is in UNIX nanoseconds. Eg. `[1680249600000000000 1323.45]`
     * @example [
     *   "1680249600000000000",
     *   "1323.45"
     * ]
     */
    history_response: string[];
    /**
     * in_liquidation_response
     * @description True if an account is in liquidation mode. Eg. `false`
     * @example false
     */
    in_liquidation_response: boolean;
    /**
     * index_currency_response
     * @description Underlying currency for index Eg. `USD`
     * @example USD
     */
    index_currency_response: string;
    /**
     * index_daily_change_response
     * @description 24-hour change in index price of the underlying asset. Eg. `12.52`
     * @example 12.52
     */
    index_daily_change_response: string;
    /**
     * index_price_response
     * @description Current index price of the asset. Eg. `12.23`
     * @example 12.23
     */
    index_price_response: string;
    /**
     * initial_margin_response
     * @description Margin required to keep an open order. Eg. `12.23`
     * @example 12.23
     */
    initial_margin_response: string;
    /**
     * initiated_timestamp_response
     * @description Timestamp where transaction is initiated in UNIX timestamp in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    initiated_timestamp_response: string;
    /**
     * instrument
     * @description Instrument ID number.
     * @example 12
     */
    instrument: number;
    /**
     * instrument_id_response
     * @description Instrument ID number. Eg. `12`
     * @example 12
     */
    instrument_id_response: string;
    /**
     * instrument_name_response
     * @description Instrument name. Eg. `ETH-30JUN23-1600-C`
     * @example ETH-30JUN23-1600-C
     */
    instrument_name_response: string;
    /**
     * instrument_type
     * @description Type of instrument.
     * @enum {string}
     */
    instrument_type: "OPTION" | "PERPETUAL" | "SPOT";
    /**
     * instrument_type_response
     * @description Type of instrument. Eg. `OPTION`
     * @enum {string}
     */
    instrument_type_response: "OPTION" | "PERPETUAL" | "SPOT";
    /**
     * intercom_hash_response
     * @description Intercom hash used to verify user identity for intercom messages Eg. `nwiaenainhiw`
     * @example nwiaenainhiw
     */
    intercom_hash_response: string;
    /**
     * interval
     * @description Interval in seconds. A setting for market maker protection (MMP). If set to 0, MMP is disabled.
     * @example 30
     */
    interval: number;
    /**
     * interval_response
     * @description Interval in seconds. A setting for market maker protection (MMP). If set to 0, MMP is disabled. Eg. `30`
     * @example 30
     */
    interval_response: string;
    /**
     * ip_addresses
     * @description Whitelisted client's IP address for API access.
     * @example [
     *   "1.1.1.1",
     *   "2.2.2.2"
     * ]
     */
    ip_addresses: string[];
    /**
     * ip_addresses_response
     * @description Whitelisted client's IP address for API access. Eg. `[1.1.1.1 2.2.2.2]`
     * @example [
     *   "1.1.1.1",
     *   "2.2.2.2"
     * ]
     */
    ip_addresses_response: string[];
    /**
     * is_active_response
     * @description True if instrument is active and tradable. Eg. `true`
     * @example true
     */
    is_active_response: boolean;
    /**
     * is_buy
     * @description True for long order, false for short order.
     * @example true
     */
    is_buy: boolean;
    /**
     * is_buy_response
     * @description True for long order, false for short order. Eg. `true`
     * @example true
     */
    is_buy_response: boolean;
    /**
     * is_closing_response
     * @description True if a closing trade. Eg. `false`
     * @example false
     */
    is_closing_response: boolean;
    /**
     * is_paused_response
     * @description Pause status of a yield vault or strategy Eg. `false`
     * @example false
     */
    is_paused_response: boolean;
    /**
     * is_read_response
     * @description Notification read flag. Eg. `true`
     * @example true
     */
    is_read_response: boolean;
    /**
     * is_referrable_response
     * @description Whether or not the user can be referred by a specific referral-code Eg. `true`
     * @example true
     */
    is_referrable_response: boolean;
    /**
     * isolated_margin
     * @description The isolated margin of the position.
     * @example 1288.23
     */
    isolated_margin: string;
    /**
     * isolated_margin_response
     * @description The isolated margin of the position. Eg. `1288.23`
     * @example 1288.23
     */
    isolated_margin_response: string;
    /**
     * iv_response
     * @description Option's implied volatility. Eg. `0.23`
     * @example 0.23
     */
    iv_response: string;
    /**
     * l1Token_response
     * @description L1 token address Eg. `0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2`
     * @example 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
     */
    l1Token_response: string;
    /**
     * l1_tx_hash_response
     * @description L1 Transaction hash. Eg. `0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91`
     * @example 0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91
     */
    l1_tx_hash_response: string;
    /**
     * l2Token_response
     * @description L2 token address Eg. `0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2`
     * @example 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
     */
    l2Token_response: string;
    /**
     * l2_tx_hash_response
     * @description L2 Transaction hash. Eg. `0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91`
     * @example 0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91
     */
    l2_tx_hash_response: string;
    /**
     * label
     * @description Transfer label.
     * @example Rewards
     */
    label: string;
    /**
     * label_response
     * @description Transfer label. Eg. `Rewards`
     * @example Rewards
     */
    label_response: string;
    /**
     * last_updated_response
     * @description Last updated timestamp in UNIX timestamp in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    last_updated_response: string;
    /**
     * leverage
     * @description Leverage multiplier for an instrument.
     * @example 12
     */
    leverage: number;
    /**
     * leverage_response
     * @description The leverage of the position, will be shown if the position is isolated. Eg. `3.5`
     * @example 3.5
     */
    leverage_response: string;
    /**
     * limit_price
     * @description Order limit price. In 6 decimals fixed number.
     * @example 1000000
     */
    limit_price: string;
    /**
     * limit_price_response
     * @description Order limit price. In 6 decimals fixed number. Eg. `1000000`
     * @example 1000000
     */
    limit_price_response: string;
    /**
     * link_response
     * @description Link to details for the reward Eg. `https://app.aevo.xyz`
     * @example https://app.aevo.xyz
     */
    link_response: string;
    /**
     * liquidation_fee_response
     * @description Liquidation fee. Eg. `86.23`
     * @example 86.23
     */
    liquidation_fee_response: string;
    /**
     * liquidation_price_response
     * @description Liquidation price of the order/position. Eg. `1288.23`
     * @example 1288.23
     */
    liquidation_price_response: string;
    /**
     * liquidity_response
     * @description Taker or maker order type Eg. `maker`
     * @enum {string}
     */
    liquidity_response: "maker" | "taker";
    /**
     * maintenance_margin_response
     * @description Maintenance margin. Eg. `12.23`
     * @example 12.23
     */
    maintenance_margin_response: string;
    /**
     * maker
     * @description Account's Ethereum address.
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    maker: string;
    /**
     * maker_fee_response
     * @description Account's maker fee structure Eg. `0.0003`
     * @example 0.0003
     */
    maker_fee_response: string;
    /**
     * margin_type
     * @description The margin type.
     * @enum {string}
     */
    margin_type: "CROSS" | "ISOLATED";
    /**
     * margin_type_response
     * @description The margin type. Eg. `CROSS`
     * @enum {string}
     */
    margin_type_response: "CROSS" | "ISOLATED";
    /**
     * mark_daily_change_response
     * @description 24-hour change in mark price of the instrument. Eg. `12.52`
     * @example 12.52
     */
    mark_daily_change_response: string;
    /**
     * mark_price_24h_ago_response
     * @description Mark price of the instrument from 24-hour ago. Eg. `12.52`
     * @example 12.52
     */
    mark_price_24h_ago_response: string;
    /**
     * mark_price_response
     * @description Mark price of the instrument. Eg. `12.23`
     * @example 12.23
     */
    mark_price_response: string;
    /**
     * max_leverage_response
     * @description The maximum leverage multiplier for an instrument. Eg. `12`
     * @example 12
     */
    max_leverage_response: string;
    /**
     * max_notional_value_response
     * @description Maximum allowed notional value Eg. `0.1`
     * @example 0.1
     */
    max_notional_value_response: string;
    /**
     * max_order_value_response
     * @description Maximum allowed order value Eg. `0.1`
     * @example 0.1
     */
    max_order_value_response: string;
    /**
     * min_order_value_response
     * @description Minimum allowed order value Eg. `0.1`
     * @example 0.1
     */
    min_order_value_response: string;
    /**
     * mmp
     * @description Flag to include order into MMP.
     * @example false
     */
    mmp: boolean;
    /**
     * mmp_enabled_response
     * @description Whether or not mmp is enabled Eg. `true`
     * @example true
     */
    mmp_enabled_response: boolean;
    /**
     * name
     * @description API key name.
     * @example main
     */
    name: string;
    /**
     * name_response
     * @description name Eg. `5732cc1f14e842f393e8cdecb49f02fa`
     * @example 5732cc1f14e842f393e8cdecb49f02fa
     */
    name_response: string;
    /**
     * next_epoch_response
     * @description Next epoch in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    next_epoch_response: string;
    /**
     * next_funding_rate_timestamp_response
     * @description Timestamp of the next funding rate change Eg. `USD`
     * @example USD
     */
    next_funding_rate_timestamp_response: string;
    /**
     * notification_type_response
     * @description Notification type. Eg. ``
     * @enum {string}
     */
    notification_type_response: "fill" | "liquidation_started" | "liquidation_completed" | "deposit_finalized" | "withdrawal_finalized" | "mmp_updated" | "mmp_unfrozen" | "mmp_triggered" | "send_initiated" | "send_finalized" | "receive" | "referral" | "referee" | "settled" | "email_verification";
    /**
     * open_interest_response
     * @description Open interest in USDC terms for a given expiry. Eg. `1234.56`
     * @example 1234.56
     */
    open_interest_response: string;
    /**
     * option_type_response
     * @description Type of option contract. Eg. `call`
     * @enum {string}
     */
    option_type_response: "put" | "call";
    /**
     * order_id_response
     * @description Order ID is the hash of the order payload Eg. `0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8`
     * @example 0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8
     */
    order_id_response: string;
    /**
     * order_status_response
     * @description Order status. Eg. `filled`
     * @enum {string}
     */
    order_status_response: "filled" | "partial" | "opened" | "cancelled" | "expired" | "rejected" | "stop_order";
    /**
     * order_type_response
     * @description Order type. Eg. `limit`
     * @enum {string}
     */
    order_type_response: "limit" | "market";
    /**
     * payout_response
     * @description Settlement payout. Signed float string. Eg. `12.23`
     * @example 12.23
     */
    payout_response: string;
    /**
     * pending_withdrawals_response
     * @description Pending withdrawals for a yield vault or strategy Eg. `12`
     * @example 12
     */
    pending_withdrawals_response: string;
    /**
     * period_response
     * @description Duration of referral/referee discount Eg. `6 months`
     * @example 6 months
     */
    period_response: string;
    /**
     * pnl_response
     * @description Profit and loss. Signed float string. Eg. `12.23`
     * @example 12.23
     */
    pnl_response: string;
    /**
     * portfolio_response
     * @description Portfolio margin. Eg. `false`
     * @example false
     */
    portfolio_response: boolean;
    /**
     * position_count_response
     * @description Number of positions liquidated. Eg. `12`
     * @example 12
     */
    position_count_response: string;
    /**
     * post_only
     * @description True for post-only maker orders, false for standard orders.
     * @example false
     */
    post_only: boolean;
    /**
     * pps_response
     * @description Price per share of a yield vault or strategy Eg. `1.04`
     * @example 1.04
     */
    pps_response: string;
    /**
     * pre_launch_response
     * @description Flag whether the perpetual is pre-launched. Eg. `true`
     * @example true
     */
    pre_launch_response: boolean;
    /**
     * price
     * @description Order limit price. In 6 decimals fixed number.
     * @example 2000000
     */
    price: string;
    /**
     * price__swap_preview_response
     * @description The price Eg. `1982`
     * @example 1982
     */
    price__swap_preview_response: string;
    /**
     * price_precision_response
     * @description Allowed increments in price. Eg. `0.05`
     * @example 0.05
     */
    price_precision_response: string;
    /**
     * price_response
     * @description Limit price for the order. Eg. `12.34`
     * @example 12.34
     */
    price_response: string;
    /**
     * price_step_response
     * @description Allowed increments in price. Eg. `0.05`
     * @example 0.05
     */
    price_step_response: string;
    /**
     * product_volume_response
     * @description Type of product: Futures, Perpetual, Options Eg. `Perpetual`
     * @example Perpetual
     */
    product_volume_response: string;
    /**
     * profit_factor_response
     * @description Profit Factor. Eg. `1.4`
     * @example 1.4
     */
    profit_factor_response: string;
    /**
     * put_call_ratio_response
     * @description Put call ratio. Eg. `0.23`
     * @example 0.23
     */
    put_call_ratio_response: string;
    /**
     * puts_response
     * @description Put options open interest in number of contracts. Eg. `1234.56`
     * @example 1234.56
     */
    puts_response: string;
    /**
     * quote_amount
     * @description Amount of USDC. In 6 decimals fixed number.
     * @example 1000000
     */
    quote_amount: string;
    /**
     * quote_amount_response
     * @description Amount of USDC. In 6 decimals fixed number. Eg. `1000000`
     * @example 1000000
     */
    quote_amount_response: string;
    /**
     * quote_asset_response
     * @description Quote asset symbol. Eg. `USDC`
     * @example USDC
     */
    quote_asset_response: string;
    /**
     * quote_balance_response
     * @description The USDC balance. Eg. `12.23`
     * @example 12.23
     */
    quote_balance_response: string;
    /**
     * quote_capacity_response
     * @description The USDC swap capacity balance. Eg. `12.23`
     * @example 12.23
     */
    quote_capacity_response: string;
    /**
     * quote_id_response
     * @description Quote ID is the hash of the quote payload Eg. `0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8`
     * @example 0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8
     */
    quote_id_response: string;
    /**
     * quote_status_response
     * @description Quote status. Eg. `filled`
     * @enum {string}
     */
    quote_status_response: "filled" | "partial" | "opened" | "cancelled" | "rejected";
    /**
     * ratio
     * @description Ratio of the instrument leg in decimals.
     * @example 1
     */
    ratio: number;
    /**
     * ratio_response
     * @description Ratio of the instrument leg in decimals. Eg. `1`
     * @example 1
     */
    ratio_response: string;
    /**
     * read_only
     * @description API can only access read-only endpoints if true.
     * @example true
     */
    read_only: boolean;
    /**
     * read_only_response
     * @description API can only access read-only endpoints if true. Eg. `true`
     * @example true
     */
    read_only_response: boolean;
    /**
     * realized_pnl_response
     * @description Realized profit and loss. Signed float string. Eg. `12.23`
     * @example 12.23
     */
    realized_pnl_response: string;
    /**
     * recipient
     * @description A recipient account's Ethereum address.
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    recipient: string;
    /**
     * reduce_only
     * @description True for reduce-only orders, false for standard orders.
     * @example false
     */
    reduce_only: boolean;
    /**
     * reduce_only_response
     * @description True for reduce-only orders, false for standard orders. Eg. `false`
     * @example false
     */
    reduce_only_response: boolean;
    /**
     * referee_discount_response
     * @description Total percentage discount for being referred by this referrer Eg. `0.1`
     * @example 0.1
     */
    referee_discount_response: string;
    /**
     * referee_response
     * @description Referee address of a Referrer Eg. `0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b`
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    referee_response: string;
    /**
     * referee_username_response
     * @description Username of the referee of a referrer Eg. `Officially-Evolved-Terrier`
     * @example Officially-Evolved-Terrier
     */
    referee_username_response: string;
    /**
     * referral_code
     * @description Referral Code (username of referrer) of the new account registration
     * @example Indignant-Intelligent-Satoshi
     */
    referral_code: string;
    /**
     * referred_response
     * @description Number of users Referrer has referred Eg. `4`
     * @example 4
     */
    referred_response: string;
    /**
     * referrer_response
     * @description Referrer of a referee Eg. `0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b`
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    referrer_response: string;
    /**
     * restricted_response
     * @description Whether or not the ip has restricted access Eg. `true`
     * @example true
     */
    restricted_response: boolean;
    /**
     * reward_type_response
     * @description Type of reward an account gets Eg. `referral_bonus`
     * @example referral_bonus
     */
    reward_type_response: string;
    /**
     * rewards_response
     * @description Rewards for a referral trade Eg. `12.23`
     * @example 12.23
     */
    rewards_response: string;
    /**
     * rho_response
     * @description Option's Rho. Eg. `0.23`
     * @example 0.23
     */
    rho_response: string;
    /**
     * role_response
     * @description Role of the account Eg. `maker`
     * @enum {string}
     */
    role_response: "taker" | "maker";
    /**
     * salt
     * @description A randomly generated number to guarantee transaction uniqueness. In 6 decimals fixed number.
     * @example 12345678
     */
    salt: string;
    /**
     * send_email_verification_response
     * @description Whether send a verification email after user sets email address. Eg. `false`
     * @example false
     */
    send_email_verification_response: boolean;
    /**
     * sequence_response
     * @description Sequence of the current time Eg. `1602711444`
     * @example 1602711444
     */
    sequence_response: string;
    /**
     * settlement_price_response
     * @description Settlement price at expiry. Eg. `1734.23`
     * @example 1734.23
     */
    settlement_price_response: string;
    /**
     * settlement_timestamp_response
     * @description Timestamp at which the settlement price is set Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    settlement_timestamp_response: string;
    /**
     * sharpe_ratio_response
     * @description Sharpe ratio. Eg. `12.23`
     * @example 12.23
     */
    sharpe_ratio_response: string;
    /**
     * side_response
     * @description Trade side. Eg. `buy`
     * @enum {string}
     */
    side_response: "buy" | "sell";
    /**
     * signature
     * @description Hash of order payload signature signed by the account.
     * @example 0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91
     */
    signature: string;
    /**
     * signing_key
     * @description Ethereum address of the signing key.
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    signing_key: string;
    /**
     * signing_key_response
     * @description Ethereum address of the signing key. Eg. `0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b`
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    signing_key_response: string;
    /**
     * signing_key_signature
     * @description Hash of EIP-712 signature signed by the signing key.
     * @example 0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91
     */
    signing_key_signature: string;
    /**
     * socket_connector
     * @description The socket connector address.
     * @example 0x2b42AFFD4b7C14d9B7C2579229495c052672Ccd3
     */
    socket_connector: string;
    /**
     * socket_connector_response
     * @description The socket connector address. Eg. `0x2b42AFFD4b7C14d9B7C2579229495c052672Ccd3`
     * @example 0x2b42AFFD4b7C14d9B7C2579229495c052672Ccd3
     */
    socket_connector_response: string;
    /**
     * socket_fees
     * @description The socket gas fees.
     * @example 194670186373086
     */
    socket_fees: string;
    /**
     * socket_msg_gas_limit
     * @description The socket message gas limit.
     * @example 500000
     */
    socket_msg_gas_limit: string;
    /**
     * spot_price_response
     * @description Spot price. Eg. `1802.30`
     * @example 1802.30
     */
    spot_price_response: string;
    /**
     * stop
     * @description Type of stop order.
     * @enum {string}
     */
    stop: "STOP_LOSS" | "TAKE_PROFIT";
    /**
     * stop_response
     * @description Type of stop order. Eg. `STOP_LOSS`
     * @enum {string}
     */
    stop_response: "STOP_LOSS" | "TAKE_PROFIT";
    /**
     * stop_type_response
     * @description Type of stop order. Eg. `STOP_LOSS`
     * @enum {string}
     */
    stop_type_response: "STOP_LOSS" | "TAKE_PROFIT";
    /**
     * strategy_address
     * @description Address of strategy
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    strategy_address: string;
    /**
     * strategy_transaction_type
     * @description Transaction types for vault and strategy interactions
     * @enum {string}
     */
    strategy_transaction_type: "DEPOSIT" | "WITHDRAW";
    /**
     * strike_response
     * @description Option strike price. Eg. `2500`
     * @example 2500
     */
    strike_response: string;
    /**
     * success_response
     * @description Request successful if true. Eg. `true`
     * @example true
     */
    success_response: boolean;
    /**
     * swap_asset_response
     * @description Base asset of a collateral swap. Eg. `ETH`
     * @example ETH
     */
    swap_asset_response: string;
    /**
     * system_type
     * @description Can be set to API or WEB (API is set by default)
     * @enum {string}
     */
    system_type: "API" | "WEB";
    /**
     * system_type_response
     * @description Can be set to API or WEB (API is set by default) Eg. `API`
     * @enum {string}
     */
    system_type_response: "API" | "WEB";
    /**
     * taker_fee_response
     * @description Account's taker fee structure Eg. `0.0005`
     * @example 0.0005
     */
    taker_fee_response: string;
    /**
     * target_currency_response
     * @description Symbol/currency code of target pair Eg. `ETH`
     * @example ETH
     */
    target_currency_response: string;
    /**
     * target_volume_response
     * @description 24 hour trading volume in target pair volume Eg. `0`
     * @example 0
     */
    target_volume_response: string;
    /**
     * theta_response
     * @description Option's Theta. Eg. `0.23`
     * @example 0.23
     */
    theta_response: string;
    /**
     * ticker_id_response
     * @description Identifier of a ticker with delimiter to separate base/target, eg. BTC-PERP Eg. `ETH-PERP`
     * @example ETH-PERP
     */
    ticker_id_response: string;
    /**
     * time_in_force
     * @description Can be set to GTC or IOC (GTC is set by default)
     * @enum {string}
     */
    time_in_force: "GTC" | "IOC";
    /**
     * time_response
     * @description ISO string of the current time Eg. `2023-08-24 07:15:51.448450894 +0000 UTC`
     * @example 2023-08-24 07:15:51.448450894 +0000 UTC
     */
    time_response: string;
    /**
     * timestamp
     * @description Timestamp used in order signing in UNIX timestamp in seconds.
     * @example 1680249600
     */
    timestamp: string;
    /**
     * timestamp_response
     * @description Timestamp in UNIX in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    timestamp_response: string;
    /**
     * to
     * @description Ethereum address to send withdrawals to.
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    to: string;
    /**
     * to_response
     * @description Ethereum address to send withdrawals to. Eg. `0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b`
     * @example 0xE9b3a48d15BE316A8e34FAd53fFDFDddf0C3D24b
     */
    to_response: string;
    /**
     * total_matched_amount_response
     * @description Number of contracts. Unsigned float string. Eg. `12.23`
     * @example 12.23
     */
    total_matched_amount_response: string;
    /**
     * total_oi_response
     * @description Total open interest in number of contracts. Eg. `1234.56`
     * @example 1234.56
     */
    total_oi_response: string;
    /**
     * total_referee_discount_response
     * @description Total amount of rewards earned by an account for being a referee Eg. `69.2`
     * @example 69.2
     */
    total_referee_discount_response: string;
    /**
     * total_referee_discount_unclaimed_response
     * @description Total amount of rewards earned by an account for being a referee that has not been claimed Eg. `69.2`
     * @example 69.2
     */
    total_referee_discount_unclaimed_response: string;
    /**
     * total_referral_bonus_response
     * @description Total amount of rewards earned by an account for being a referrer Eg. `69.2`
     * @example 69.2
     */
    total_referral_bonus_response: string;
    /**
     * total_referral_bonus_unclaimed_response
     * @description Total amount of rewards earned by an account for being a referrer that has not been claimed Eg. `69.2`
     * @example 69.2
     */
    total_referral_bonus_unclaimed_response: string;
    /**
     * total_response
     * @description Total open interest in number of contracts. Eg. `1234.56`
     * @example 1234.56
     */
    total_response: string;
    /**
     * total_rewards_response
     * @description Total amount of rewards earned by an account for being a referrer or referee Eg. `69.2`
     * @example 69.2
     */
    total_rewards_response: string;
    /**
     * total_rewards_unclaimed_response
     * @description Total amount of rewards earned by an account for being a referrer or referee that has not been claimed Eg. `69.2`
     * @example 69.2
     */
    total_rewards_unclaimed_response: string;
    /**
     * total_volume_contracts_response
     * @description Total traded volume in contract terms. Eg. `1234.5`
     * @example 1234.5
     */
    total_volume_contracts_response: string;
    /**
     * total_volume_premium_response
     * @description Total traded premium volume in USD terms. Eg. `1234.56`
     * @example 1234.56
     */
    total_volume_premium_response: string;
    /**
     * total_volume_response
     * @description Total traded notional volume in USD terms. Eg. `1234.56`
     * @example 1234.56
     */
    total_volume_response: string;
    /**
     * trade_id_response
     * @description Unique ID of the trade. Eg. `DwmDn5XnEyiqx5AB5CM4W8bgD137ASX4Lz1XWBYqvpX2`
     * @example DwmDn5XnEyiqx5AB5CM4W8bgD137ASX4Lz1XWBYqvpX2
     */
    trade_id_response: string;
    /**
     * trade_status_response
     * @description Trade status. Eg. `filled`
     * @enum {string}
     */
    trade_status_response: "filled" | "partial";
    /**
     * trade_type_response
     * @description Type of user trade. Eg. `trade`
     * @enum {string}
     */
    trade_type_response: "trade" | "liquidation" | "settlement" | "funding";
    /**
     * trigger
     * @description The price to trigger the stop order at. `stop` is required when `trigger` is specified.
     * @example 1836.74
     */
    trigger: string;
    /**
     * trigger_response
     * @description The price to trigger the stop order at. `stop` is required when `trigger` is specified. Eg. `1836.74`
     * @example 1836.74
     */
    trigger_response: string;
    /**
     * triggered_response
     * @description Account under MMP if true Eg. `true`
     * @example true
     */
    triggered_response: boolean;
    /**
     * tx_hash_response
     * @description Transaction hash. Eg. `0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91`
     * @example 0x4c55895aa6f2dfc2da8189a71a054348ce63abbc1ae27267977e0d9cc6848e91
     */
    tx_hash_response: string;
    /**
     * tx_status_response
     * @description Transaction status. Eg. `initiated`
     * @enum {string}
     */
    tx_status_response: "initiated" | "finalized";
    /**
     * tx_type_response
     * @description Type of user transaction. Eg. `deposit`
     * @enum {string}
     */
    tx_type_response: "deposit" | "withdraw" | "send" | "receive" | "swap" | "yv_deposit" | "yv_withdraw";
    /**
     * type_response
     * @description For REST API, the value is always set to `snapshot`. Eg. `snapshot`
     * @example snapshot
     */
    type_response: string;
    /**
     * underlying_asset_response
     * @description Underlying asset symbol. Eg. `ETH`
     * @example ETH
     */
    underlying_asset_response: string;
    /**
     * unrealized_pnl_response
     * @description Unrealized PNL. Eg. `12.23`
     * @example 12.23
     */
    unrealized_pnl_response: string;
    /**
     * updated_timestamp_response
     * @description Updated timestamp in UNIX timestamp in nanoseconds. Eg. `1680249600000000000`
     * @example 1680249600000000000
     */
    updated_timestamp_response: string;
    /**
     * used_response
     * @description Margin used. Eg. `12.23`
     * @example 12.23
     */
    used_response: string;
    /**
     * username_response
     * @description Account's auto-generated username based on their Ethereum address. Eg. `officially-evolved-terrier`
     * @example officially-evolved-terrier
     */
    username_response: string;
    /**
     * vega_response
     * @description Option's Vega. Eg. `0.23`
     * @example 0.23
     */
    vega_response: string;
    /**
     * volume_response
     * @description Volume in USDC terms. Eg. `12.23`
     * @example 12.23
     */
    volume_response: string;
    /**
     * win_rate_response
     * @description Win rate. Eg. `12.23`
     * @example 12.23
     */
    win_rate_response: string;
  };
  responses: never;
  parameters: {
    /** @description Account's Ethereum address. */
    AccountQuery: string;
    /** @description Aggregates trades if set to true. */
    AggQueryOptional?: boolean;
    /** @description Number of contracts. In 6 decimals fixed number. */
    AmountQuery: string;
    /** @description Account's API Key. */
    ApiKeyQuery: string;
    /** @description Name of underlying asset. */
    AssetQuery: string;
    /** @description Name of underlying asset. */
    AssetQueryOptional?: string;
    /** @description Array of assets */
    AssetsQuery: string[];
    /** @description Block ID is the unique identifier of the block */
    BlockIdPath: string;
    /** @description Block ID is the unique identifier of the block */
    BlockIdQueryOptional?: string;
    /** @description Entries created after (>) end time are excluded in UNIX timestamp in nanoseconds. Defaults to current time. */
    EndTimeQueryOptional?: number;
    /** @description Option expiry in UNIX timestamp in nanoseconds. */
    ExpiryQuery: string;
    /** @description Instrument ID number. */
    InstrumentIdQuery: number;
    /** @description Instrument name. */
    InstrumentNamePath: string;
    /** @description Instrument name. */
    InstrumentNamePerpQuery: string;
    /** @description Instrument name. */
    InstrumentNameQuery: string;
    /** @description Instrument name. */
    InstrumentNameQueryOptional?: string;
    /** @description Type of instrument. */
    InstrumentTypeQueryOptional?: "OPTION" | "PERPETUAL" | "SPOT";
    /** @description True for long order, false for short order. */
    IsBuyQuery: boolean;
    /** @description Is maker. */
    LeaderboardTypeQueryOptional?: "MAKER" | "TAKER";
    /** @description Order limit price. In 6 decimals fixed number. */
    LimitPriceQuery: string;
    /** @description Limits the number of relevant entries in the response. Defaults to `50`. Maximum value is `1000` */
    LimitQuery: number;
    /** @description Limits the number of relevant entries in the response. Defaults to `50`. Maximum value is `1000` */
    LimitQueryOptional?: number;
    /** @description Offset. */
    OffsetQueryOptional?: number;
    /** @description Type of option contract. */
    OptionTypeQueryOptional?: "put" | "call";
    /** @description Order ID is the hash of the order payload */
    OrderIdPath: string;
    /** @description Order ID is the hash of the order payload */
    OrderIdQueryOptional?: string;
    /** @description Quote ID is the hash of the quote payload */
    QuoteIdPath: string;
    /** @description Quote ID is the hash of the quote payload */
    QuoteIdQueryOptional?: string;
    /** @description List of quote IDs. */
    QuoteIdsQueryOptional?: string[];
    /** @description Referral Code (username of referrer) of the new account registration */
    ReferralCodeQuery: string;
    /** @description Interval between entries in seconds. Must be a multiple of 30. Defaults to `30` */
    ResolutionQueryOptional?: number;
    /** @description Role of the account */
    RoleQueryOptional?: "taker" | "maker";
    /** @description Hash of order payload signature signed by the account. */
    SignatureQuery: string;
    /** @description Either ASC or DESC. Default is DESC */
    SortOrderQueryOptional?: "ASC" | "DESC";
    /** @description Sort field */
    SortQueryOptional?: string;
    /** @description Entries created prior (<) to start time are excluded in UNIX timestamp in nanoseconds. Defaults to `0` */
    StartTimeQuery: number;
    /** @description Entries created prior (<) to start time are excluded in UNIX timestamp in nanoseconds. Defaults to `0` */
    StartTimeQueryOptional?: number;
    /** @description Timestamp in UNIX in nanoseconds. */
    TimestampQuery: string;
    /** @description Type of user trade. */
    TradeTypesQueryOptional?: ("trade" | "liquidation" | "settlement" | "funding")[];
    /** @description Transaction status. */
    TxStatusQueryOptional?: "initiated" | "finalized";
    /** @description Type of user transaction. */
    TxTypeQueryOptional?: "deposit" | "withdraw" | "send" | "receive" | "swap" | "yv_deposit" | "yv_withdraw";
    /** @description Filter by unread only */
    UnreadQueryOptional?: boolean;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * GET /assets
   * @description Returns the list of active underlying assets.
   */
  GetAssets: {
    responses: {
      /** @description List of underlying assets. */
      200: {
        content: {
          "application/json": components["schemas"]["asset_response"][];
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /expiries
   * @description Returns the expiry timestamps of derivatives of the given asset.
   */
  GetExpiries: {
    parameters: {
      query: {
        asset: components["parameters"]["AssetQuery"];
      };
    };
    responses: {
      /** @description List of expiries. */
      200: {
        content: {
          "application/json": components["schemas"]["expiry_response"][];
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /index
   * @description Returns the current index price of the given asset.
   */
  GetIndex: {
    parameters: {
      query: {
        asset: components["parameters"]["AssetQuery"];
      };
    };
    responses: {
      /** @description Index price of the asset. */
      200: {
        content: {
          "application/json": {
            price: components["schemas"]["price_response"];
            timestamp: components["schemas"]["timestamp_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /index-history
   * @description Returns the historical index price for a given asset.
   */
  GetIndexHistory: {
    parameters: {
      query: {
        asset: components["parameters"]["AssetQuery"];
        resolution?: components["parameters"]["ResolutionQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
      };
    };
    responses: {
      /** @description Array of historical index price of the asset. */
      200: {
        content: {
          "application/json": {
            /**
             * history_array
             * @description List of [timestamp, price]. Timestamp is in UNIX nanoseconds.
             * @example [
             *   [
             *     "1680249600000000000",
             *     "1323.45"
             *   ]
             * ]
             */
            history?: components["schemas"]["history_response"][];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /mark-history
   * @description Returns the historical mark prices for a given instrument.
   */
  GetMarkHistory: {
    parameters: {
      query: {
        instrument_name: components["parameters"]["InstrumentNameQuery"];
        resolution?: components["parameters"]["ResolutionQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
      };
    };
    responses: {
      /** @description Array of historical mark prices for the given instrument. */
      200: {
        content: {
          "application/json": {
            /**
             * history_array
             * @description List of [timestamp, price]. Timestamp is in UNIX nanoseconds.
             * @example [
             *   [
             *     "1680249600000000000",
             *     "1323.45"
             *   ]
             * ]
             */
            history?: components["schemas"]["history_response"][];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /settlement-history
   * @description Returns the historical settlement prices for a given asset.
   */
  GetSettlementHistory: {
    parameters: {
      query?: {
        asset?: components["parameters"]["AssetQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
      };
    };
    responses: {
      /** @description Array of historical settlement price of the asset. */
      200: {
        content: {
          "application/json": {
              asset: components["schemas"]["asset_response"];
              expiry: components["schemas"]["expiry_response"];
              settlement_price: components["schemas"]["settlement_price_response"];
              settlement_timestamp: components["schemas"]["settlement_timestamp_response"];
            }[];
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /markets
   * @description Returns a list of instruments. If `asset` is not specified, the response will include all listed instruments.
   */
  GetMarkets: {
    parameters: {
      query?: {
        asset?: components["parameters"]["AssetQueryOptional"];
        instrument_type?: components["parameters"]["InstrumentTypeQueryOptional"];
      };
    };
    responses: {
      /** @description List of instruments. */
      200: {
        content: {
          "application/json": {
              instrument_id: components["schemas"]["instrument_id_response"];
              instrument_name: components["schemas"]["instrument_name_response"];
              instrument_type: components["schemas"]["instrument_type_response"];
              underlying_asset: components["schemas"]["underlying_asset_response"];
              quote_asset: components["schemas"]["quote_asset_response"];
              price_step: components["schemas"]["price_step_response"];
              amount_step: components["schemas"]["amount_step_response"];
              min_order_value: components["schemas"]["min_order_value_response"];
              max_order_value: components["schemas"]["max_order_value_response"];
              max_notional_value: components["schemas"]["max_notional_value_response"];
              mark_price: components["schemas"]["mark_price_response"];
              forward_price?: components["schemas"]["forward_price_response"];
              index_price: components["schemas"]["index_price_response"];
              is_active: components["schemas"]["is_active_response"];
              option_type?: components["schemas"]["option_type_response"];
              expiry?: components["schemas"]["expiry_response"];
              strike?: components["schemas"]["strike_response"];
              greeks?: {
                delta: components["schemas"]["delta_response"];
                gamma: components["schemas"]["gamma_response"];
                rho: components["schemas"]["rho_response"];
                theta: components["schemas"]["theta_response"];
                vega: components["schemas"]["vega_response"];
                iv: components["schemas"]["iv_response"];
              };
              max_leverage?: components["schemas"]["max_leverage_response"];
              pre_launch?: components["schemas"]["pre_launch_response"];
            }[];
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /statistics
   * @description Returns the market statistics for the given asset.
   */
  GetStatistics: {
    parameters: {
      query?: {
        asset?: components["parameters"]["AssetQueryOptional"];
        instrument_type?: components["parameters"]["InstrumentTypeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
      };
    };
    responses: {
      /** @description Instrument trade information. */
      200: {
        content: {
          "application/json": {
            asset?: components["schemas"]["asset_response"];
            open_interest?: {
              calls?: components["schemas"]["calls_response"];
              puts?: components["schemas"]["puts_response"];
              total: components["schemas"]["total_response"];
            };
            daily_volume: components["schemas"]["daily_volume_response"];
            daily_buy_volume: components["schemas"]["daily_buy_volume_response"];
            daily_sell_volume: components["schemas"]["daily_sell_volume_response"];
            daily_volume_premium?: components["schemas"]["daily_volume_premium_response"];
            total_volume?: components["schemas"]["total_volume_response"];
            total_volume_premium?: components["schemas"]["total_volume_premium_response"];
            daily_volume_contracts?: components["schemas"]["daily_volume_contracts_response"];
            index_price?: components["schemas"]["index_price_response"];
            index_daily_change?: components["schemas"]["index_daily_change_response"];
            mark_price?: components["schemas"]["mark_price_response"];
            mark_price_24h_ago?: components["schemas"]["mark_price_24h_ago_response"];
            mark_daily_change?: components["schemas"]["mark_daily_change_response"];
            funding_daily_avg?: components["schemas"]["funding_daily_avg_response"];
            put_call_ratio?: components["schemas"]["put_call_ratio_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /coingecko-statistics
   * @description Returns the perpetual statistics of all assets specifically for https://www.coingecko.com/en/exchanges/aevo
   */
  GetCoingeckoStatistics: {
    responses: {
      /** @description Instrument trade information. */
      200: {
        content: {
          "application/json": {
              ticker_id: components["schemas"]["ticker_id_response"];
              base_currency?: components["schemas"]["base_currency_response"];
              target_currency?: components["schemas"]["target_currency_response"];
              target_volume?: components["schemas"]["target_volume_response"];
              product_volume?: components["schemas"]["product_volume_response"];
              open_interest?: components["schemas"]["open_interest_response"];
              index_price?: components["schemas"]["index_price_response"];
              index_currency?: components["schemas"]["index_currency_response"];
              next_funding_rate_timestamp?: components["schemas"]["next_funding_rate_timestamp_response"];
              funding_rate?: components["schemas"]["funding_rate_response"];
              contract_type?: components["schemas"]["contract_type_response"];
              contract_price_currency?: components["schemas"]["contract_price_currency_response"];
            }[];
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /orderbook
   * @description Returns the orderbook for a given symbol.
   */
  GetOrderbook: {
    parameters: {
      query: {
        instrument_name: components["parameters"]["InstrumentNameQuery"];
      };
    };
    responses: {
      /** @description Instrument orderbook. */
      200: {
        content: {
          "application/json": {
            type: components["schemas"]["type_response"];
            instrument_id: components["schemas"]["instrument_id_response"];
            instrument_name: components["schemas"]["instrument_name_response"];
            instrument_type: components["schemas"]["instrument_type_response"];
            /**
             * bids_array
             * @description Array of 3 elements, price in USD, contract amount, and IV respectively.
             * @example [
             *   [
             *     "1",
             *     "100",
             *     "12"
             *   ]
             * ]
             */
            bids?: components["schemas"]["bids_response"][];
            /**
             * asks_array
             * @description Array of 3 elements, price in USD, contract amount, and IV respectively.
             * @example [
             *   [
             *     "1",
             *     "100",
             *     "12"
             *   ]
             * ]
             */
            asks?: components["schemas"]["asks_response"][];
            last_updated: components["schemas"]["last_updated_response"];
            checksum: components["schemas"]["checksum_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /funding
   * @description Returns the current funding rate for the instrument.
   */
  GetFunding: {
    parameters: {
      query: {
        instrument_name: components["parameters"]["InstrumentNamePerpQuery"];
      };
    };
    responses: {
      /** @description Funding rate of the instrument. */
      200: {
        content: {
          "application/json": {
            funding_rate: components["schemas"]["funding_rate_response"];
            next_epoch: components["schemas"]["next_epoch_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /funding-history
   * @description Returns the funding rate history for the instrument.
   */
  GetFundingHistory: {
    parameters: {
      query?: {
        instrument_name?: components["parameters"]["InstrumentNameQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
      };
    };
    responses: {
      /** @description Funding rate history of the instrument. */
      200: {
        content: {
          "application/json": {
            /**
             * funding_history_array
             * @description List of [instrument name, timestamp, funding rate, mark price]. Timestamp is in UNIX nanoseconds. Funding rate is in decimals.
             * @example [
             *   [
             *     "ETH-PERP",
             *     "1680249600000000000",
             *     "0.000123",
             *     "1892.82"
             *   ]
             * ]
             */
            funding_history?: components["schemas"]["funding_history_response"][];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /instrument/{instrument_name}
   * @description Returns the instrument information for the given instrument.
   */
  GetInstrumentInstrumentName: {
    parameters: {
      path: {
        instrument_name: components["parameters"]["InstrumentNamePath"];
      };
    };
    responses: {
      /** @description Instrument information. */
      200: {
        content: {
          "application/json": {
            asset: components["schemas"]["asset_response"];
            instrument_id: components["schemas"]["instrument_id_response"];
            instrument_name: components["schemas"]["instrument_name_response"];
            instrument_type: components["schemas"]["instrument_type_response"];
            mark_price: components["schemas"]["mark_price_response"];
            index_price: components["schemas"]["index_price_response"];
            forward_price: components["schemas"]["forward_price_response"];
            best_bid?: {
              price: components["schemas"]["price_response"];
              amount: components["schemas"]["amount_response"];
              iv: components["schemas"]["iv_response"];
            };
            best_ask?: {
              price: components["schemas"]["price_response"];
              amount: components["schemas"]["amount_response"];
              iv: components["schemas"]["iv_response"];
            };
            markets?: {
              daily_volume: components["schemas"]["daily_volume_response"];
              daily_volume_contracts: components["schemas"]["daily_volume_contracts_response"];
              total_volume: components["schemas"]["total_volume_response"];
              total_volume_contracts: components["schemas"]["total_volume_contracts_response"];
              total_oi: components["schemas"]["total_oi_response"];
            };
            greeks?: {
              delta: components["schemas"]["delta_response"];
              gamma: components["schemas"]["gamma_response"];
              rho: components["schemas"]["rho_response"];
              theta: components["schemas"]["theta_response"];
              vega: components["schemas"]["vega_response"];
              iv: components["schemas"]["iv_response"];
            };
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /instrument/{instrument_name}/trade-history
   * @description Returns the trade history for the given instrument.
   */
  GetInstrumentInstrumentNameTradeHistory: {
    parameters: {
      query?: {
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
      };
      path: {
        instrument_name: components["parameters"]["InstrumentNamePath"];
      };
    };
    responses: {
      /** @description Instrument trade information. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            trade_history?: {
                trade_id: components["schemas"]["trade_id_response"];
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                side: components["schemas"]["side_response"];
                price: components["schemas"]["price_response"];
                amount: components["schemas"]["amount_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /check-referral
   * @description Check if user can be referred.
   */
  GetCheckReferral: {
    parameters: {
      query: {
        account: components["parameters"]["AccountQuery"];
        referral_code: components["parameters"]["ReferralCodeQuery"];
      };
    };
    responses: {
      /** @description Can user be referred */
      200: {
        content: {
          "application/json": {
            is_referrable: components["schemas"]["is_referrable_response"];
            referee_discount: components["schemas"]["referee_discount_response"];
            code?: components["schemas"]["code_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/unsubscribe
   * @description Unsubscribe from all email preferences
   */
  PostAccountUnsubscribe: {
    requestBody?: {
      content: {
        "application/json": {
          account: components["schemas"]["account"];
          email_auth_token: components["schemas"]["email_auth_token"];
        };
      };
    };
    responses: {
      /** @description Is account unsubscribed */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /time
   * @description Returns the server time
   */
  GetTime: {
    responses: {
      /** @description Server time. */
      200: {
        content: {
          "application/json": {
            name: components["schemas"]["name_response"];
            timestamp: components["schemas"]["timestamp_response"];
            time: components["schemas"]["time_response"];
            sequence: components["schemas"]["sequence_response"];
            block: components["schemas"]["block_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /yield-vault
   * @description Returns the yield vault information for the given yield vault.
   */
  GetYieldVault: {
    responses: {
      /** @description Yield vault information. */
      200: {
        content: {
          "application/json": {
            aum: components["schemas"]["aum_response"];
            aum_liquid: components["schemas"]["aum_liquid_response"];
            cap: components["schemas"]["cap_response"];
            pps: components["schemas"]["pps_response"];
            apy: components["schemas"]["apy_response"];
            pending_withdrawals: components["schemas"]["pending_withdrawals_response"];
            is_paused: components["schemas"]["is_paused_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /swap/preview
   * @description Previews a collateral swap
   */
  PostSwapPreview: {
    requestBody?: {
      content: {
        "application/json": {
          collateral_asset: components["schemas"]["collateral_asset"];
          is_buy?: components["schemas"]["is_buy"];
          base_amount?: components["schemas"]["base_amount"];
          quote_amount?: components["schemas"]["quote_amount"];
        };
      };
    };
    responses: {
      /** @description Swap details. */
      200: {
        content: {
          "application/json": {
            quote_amount: components["schemas"]["quote_amount_response"];
            fees: components["schemas"]["fees_response"];
            fee_rate: components["schemas"]["fee_rate_response"];
            base_balance: components["schemas"]["base_balance_response"];
            quote_balance: components["schemas"]["quote_balance_response"];
            base_capacity: components["schemas"]["base_capacity_response"];
            quote_capacity: components["schemas"]["quote_capacity_response"];
            amount: components["schemas"]["amount__swap_preview_response"];
            price: components["schemas"]["price__swap_preview_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /status
   * @description Returns the exchange status.
   */
  GetStatus: {
    responses: {
      /** @description Exchange status. */
      200: {
        content: {
          "application/json": {
            status: components["schemas"]["exchange_status_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /options-chain
   * @description Returns the options chain for a given asset and expiry.
   */
  GetOptionsChain: {
    parameters: {
      query: {
        asset: components["parameters"]["AssetQuery"];
        expiry: components["parameters"]["ExpiryQuery"];
      };
    };
    responses: {
      /** @description Instrument trade information. */
      200: {
        content: {
          "application/json": {
            asset: components["schemas"]["asset_response"];
            options?: {
              calls?: {
                  instrument_name: components["schemas"]["instrument_name_response"];
                  instrument_id: components["schemas"]["instrument_id_response"];
                  mark_price: components["schemas"]["mark_price_response"];
                  iv: components["schemas"]["iv_response"];
                  delta: components["schemas"]["delta_response"];
                  open_interest: components["schemas"]["open_interest_response"];
                  strike: components["schemas"]["strike_response"];
                  expiry: components["schemas"]["expiry_response"];
                  ticker?: {
                    bid?: {
                      price: components["schemas"]["price_response"];
                      volume: components["schemas"]["volume_response"];
                      iv: components["schemas"]["iv_response"];
                    };
                    ask?: {
                      price: components["schemas"]["price_response"];
                      volume: components["schemas"]["volume_response"];
                      iv: components["schemas"]["iv_response"];
                    };
                  };
                }[];
              puts?: {
                  instrument_name: components["schemas"]["instrument_name_response"];
                  instrument_id: components["schemas"]["instrument_id_response"];
                  mark_price: components["schemas"]["mark_price_response"];
                  iv: components["schemas"]["iv_response"];
                  delta: components["schemas"]["delta_response"];
                  open_interest: components["schemas"]["open_interest_response"];
                  strike: components["schemas"]["strike_response"];
                  expiry: components["schemas"]["expiry_response"];
                  ticker?: {
                    bid?: {
                      price: components["schemas"]["price_response"];
                      volume: components["schemas"]["volume_response"];
                      iv: components["schemas"]["iv_response"];
                    };
                    ask?: {
                      price: components["schemas"]["price_response"];
                      volume: components["schemas"]["volume_response"];
                      iv: components["schemas"]["iv_response"];
                    };
                  };
                }[];
            };
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /options-history
   * @description Returns the trade history for group of instrument.
   */
  GetOptionsHistory: {
    parameters: {
      query: {
        asset: components["parameters"]["AssetQuery"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        option_type?: components["parameters"]["OptionTypeQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
      };
    };
    responses: {
      /** @description Trades. */
      200: {
        content: {
          "application/json": {
              instrument_name: components["schemas"]["instrument_name_response"];
              option_type: components["schemas"]["option_type_response"];
              expiry: components["schemas"]["expiry_response"];
              strike: components["schemas"]["strike_response"];
              iv: components["schemas"]["iv_response"];
              order_type: components["schemas"]["order_type_response"];
              side: components["schemas"]["side_response"];
              avg_price: components["schemas"]["avg_price_response"];
              amount: components["schemas"]["amount_response"];
              trade_status: components["schemas"]["trade_status_response"];
              created_timestamp: components["schemas"]["created_timestamp_response"];
            }[];
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /index-histories
   * @description Returns the historical index price for an array of assets.
   */
  GetIndexHistories: {
    parameters: {
      query: {
        assets: components["parameters"]["AssetsQuery"];
        resolution?: components["parameters"]["ResolutionQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
      };
    };
    responses: {
      /** @description Array of historical index price of the given assets. */
      200: {
        content: {
          "application/json": {
            assets_history?: {
                asset: components["schemas"]["asset_response"];
                /**
                 * history_array
                 * @description List of [timestamp, price]. Timestamp is in UNIX nanoseconds.
                 * @example [
                 *   [
                 *     "1680249600000000000",
                 *     "1323.45"
                 *   ]
                 * ]
                 */
                history?: components["schemas"]["history_response"][];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /check-restricted
   * @description Returns the restriction status of the IP address calling the API.
   */
  GetCheckRestricted: {
    responses: {
      /** @description Response containing the country and restriction status. */
      200: {
        content: {
          "application/json": {
            restricted: components["schemas"]["restricted_response"];
            country: components["schemas"]["country_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /leaderboard
   * @description Returns the leaderboard for a given instrument type.
   */
  GetLeaderboard: {
    parameters: {
      query: {
        instrument_type?: components["parameters"]["InstrumentTypeQueryOptional"];
        start_time: components["parameters"]["StartTimeQuery"];
        limit: components["parameters"]["LimitQuery"];
        leaderboard_type?: components["parameters"]["LeaderboardTypeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
      };
    };
    responses: {
      /** @description Leaderboard. */
      200: {
        content: {
          "application/json": {
            total_volume: components["schemas"]["total_volume_response"];
            ranking?: {
                username: components["schemas"]["username_response"];
                volume: components["schemas"]["volume_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /markets-summary
   * @description Returns the market summary for the given asset. Used to populate the markets dropdown in the app
   */
  GetMarketsSummary: {
    responses: {
      /** @description Markets summary */
      200: {
        content: {
          "application/json": {
            summaries?: {
                asset: components["schemas"]["asset_response"];
                index_price: components["schemas"]["index_price_response"];
                index_daily_change: components["schemas"]["index_daily_change_response"];
                option_info?: {
                  open_interest?: {
                    calls?: components["schemas"]["calls_response"];
                    puts?: components["schemas"]["puts_response"];
                    total: components["schemas"]["total_response"];
                  };
                  daily_volume?: components["schemas"]["daily_volume_response"];
                  mark_price: components["schemas"]["mark_price_response"];
                  mark_daily_change: components["schemas"]["mark_daily_change_response"];
                  price_step: components["schemas"]["price_step_response"];
                  amount_step: components["schemas"]["amount_step_response"];
                };
                perpetual_info?: {
                  open_interest?: {
                    total: components["schemas"]["total_response"];
                  };
                  mark_price: components["schemas"]["mark_price_response"];
                  mark_daily_change: components["schemas"]["mark_daily_change_response"];
                  pre_launch?: components["schemas"]["pre_launch_response"];
                  daily_volume?: components["schemas"]["daily_volume_response"];
                  price_step: components["schemas"]["price_step_response"];
                  amount_step: components["schemas"]["amount_step_response"];
                };
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /socket/capacity
   * @description Returns all account's orders.
   */
  GetSocketCapacity: {
    responses: {
      /** @description The socket withdrawal capacity for each destination chain. */
      200: {
        content: {
          "application/json": {
              socket_connector: components["schemas"]["socket_connector_response"];
              chain_id: components["schemas"]["chain_id_response"];
              capacity: components["schemas"]["capacity_response"];
            }[];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /register
   * @description Registers a new account.
   */
  PostRegister: {
    requestBody?: {
      content: {
        "application/json": {
          account: components["schemas"]["account"];
          signing_key: components["schemas"]["signing_key"];
          expiry: components["schemas"]["expiry"];
          account_signature: components["schemas"]["account_signature"];
          signing_key_signature: components["schemas"]["signing_key_signature"];
          referral_code?: components["schemas"]["referral_code"];
        };
      };
    };
    responses: {
      /** @description Account keys and credentials. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
            signing_keys?: {
                signing_key: components["schemas"]["signing_key_response"];
                expiry: components["schemas"]["expiry_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
            api_key: components["schemas"]["api_key_response"];
            api_secret: components["schemas"]["api_secret_response"];
            read_only: components["schemas"]["read_only_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /api-key
   * @description Returns the API key information.
   */
  GetApiKey: {
    parameters: {
      query: {
        api_key: components["parameters"]["ApiKeyQuery"];
        timestamp: components["parameters"]["TimestampQuery"];
        signature: components["parameters"]["SignatureQuery"];
      };
    };
    responses: {
      /** @description API key information. */
      200: {
        content: {
          "application/json": {
            name?: components["schemas"]["name_response"];
            api_key: components["schemas"]["api_key_response"];
            api_secret: components["schemas"]["api_secret_response"];
            ip_addresses?: components["schemas"]["ip_addresses_response"];
            read_only: components["schemas"]["read_only_response"];
            created_timestamp: components["schemas"]["created_timestamp_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /api-key
   * @description Creates a new API key.
   */
  PostApiKey: {
    requestBody?: {
      content: {
        "application/json": {
          name: components["schemas"]["name"];
          ip_addresses?: components["schemas"]["ip_addresses"];
          read_only?: components["schemas"]["read_only"];
        };
      };
    };
    responses: {
      /** @description API key details. */
      200: {
        content: {
          "application/json": {
            name: components["schemas"]["name_response"];
            api_key: components["schemas"]["api_key_response"];
            api_secret: components["schemas"]["api_secret_response"];
            ip_addresses?: components["schemas"]["ip_addresses_response"];
            read_only: components["schemas"]["read_only_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /api-key
   * @description Removes the account's API key. This logs out the account.
   */
  DeleteApiKey: {
    requestBody?: {
      content: {
        "application/json": {
          api_key: components["schemas"]["api_key"];
        };
      };
    };
    responses: {
      /** @description Removal Status. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /signing-key
   * @description Removes the account's signing key. This logs out the account.
   */
  DeleteSigningKey: {
    requestBody?: {
      content: {
        "application/json": {
          signing_key: components["schemas"]["signing_key"];
        };
      };
    };
    responses: {
      /** @description Removal Status. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /auth
   * @description Returns true if the given headers has valid authentication
   */
  GetAuth: {
    responses: {
      /** @description Authentication status. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /account
   * @description Returns the account's information including API keys, signing keys and positions.
   */
  GetAccount: {
    responses: {
      /** @description Account information. */
      200: {
        content: {
          "application/json": {
            account: components["schemas"]["account_response"];
            username: components["schemas"]["username_response"];
            equity: components["schemas"]["equity_response"];
            available_balance: components["schemas"]["available_balance_response"];
            balance: components["schemas"]["balance_response"];
            signing_keys?: {
                signing_key: components["schemas"]["signing_key_response"];
                expiry: components["schemas"]["expiry_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
            collaterals?: {
                collateral_asset: components["schemas"]["collateral_asset_response"];
                collateral_value: components["schemas"]["collateral_value_response"];
                balance: components["schemas"]["balance_response"];
                available_balance: components["schemas"]["available_balance_response"];
                collateral_yield_bearing: components["schemas"]["collateral_yield_bearing_response"];
                pending_withdrawals: components["schemas"]["pending_withdrawals_response"];
                unrealized_pnl: components["schemas"]["unrealized_pnl_response"];
              }[];
            api_keys?: {
                name?: components["schemas"]["name_response"];
                api_key: components["schemas"]["api_key_response"];
                ip_addresses?: components["schemas"]["ip_addresses_response"];
                read_only: components["schemas"]["read_only_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
            positions?: {
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                option?: {
                  strike: components["schemas"]["strike_response"];
                  option_type: components["schemas"]["option_type_response"];
                  expiry: components["schemas"]["expiry_response"];
                  iv: components["schemas"]["iv_response"];
                  delta: components["schemas"]["delta_response"];
                  theta: components["schemas"]["theta_response"];
                  vega: components["schemas"]["vega_response"];
                  rho: components["schemas"]["rho_response"];
                  gamma: components["schemas"]["gamma_response"];
                };
                iv?: components["schemas"]["iv_response"];
                asset: components["schemas"]["asset_response"];
                amount: components["schemas"]["amount_response"];
                side: components["schemas"]["side_response"];
                mark_price: components["schemas"]["mark_price_response"];
                avg_entry_price: components["schemas"]["avg_entry_price_response"];
                unrealized_pnl: components["schemas"]["unrealized_pnl_response"];
                maintenance_margin: components["schemas"]["maintenance_margin_response"];
                margin_type?: components["schemas"]["margin_type_response"];
                liquidation_price?: components["schemas"]["liquidation_price_response"];
                isolated_margin?: components["schemas"]["isolated_margin_response"];
                leverage?: components["schemas"]["leverage_response"];
                triggers?: {
                  take_profit?: {
                    order_id: components["schemas"]["order_id_response"];
                    trigger: components["schemas"]["trigger_response"];
                  };
                  stop_loss?: {
                    order_id: components["schemas"]["order_id_response"];
                    trigger: components["schemas"]["trigger_response"];
                  };
                };
              }[];
            account_type: components["schemas"]["account_type_response"];
            fee_structures?: {
                asset: components["schemas"]["asset_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                taker_fee: components["schemas"]["taker_fee_response"];
                maker_fee: components["schemas"]["maker_fee_response"];
              }[];
            portfolio: components["schemas"]["portfolio_response"];
            in_liquidation: components["schemas"]["in_liquidation_response"];
            initial_margin: components["schemas"]["initial_margin_response"];
            maintenance_margin: components["schemas"]["maintenance_margin_response"];
            email_address: components["schemas"]["email_address_response"];
            intercom_hash: components["schemas"]["intercom_hash_response"];
            credit: components["schemas"]["credit_response"];
            credited: components["schemas"]["credited_response"];
            has_been_referred: components["schemas"]["has_been_referred_response"];
            leverages?: {
                instrument_id: components["schemas"]["instrument_id_response"];
                leverage: components["schemas"]["leverage_response"];
                margin_type: components["schemas"]["margin_type_response"];
              }[];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /positions
   * @description Returns the account's positions
   */
  GetPositions: {
    responses: {
      /** @description Account position information. */
      200: {
        content: {
          "application/json": {
            account: components["schemas"]["account_response"];
            positions?: {
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                option?: {
                  strike: components["schemas"]["strike_response"];
                  option_type: components["schemas"]["option_type_response"];
                  expiry: components["schemas"]["expiry_response"];
                  iv: components["schemas"]["iv_response"];
                  delta: components["schemas"]["delta_response"];
                  theta: components["schemas"]["theta_response"];
                  vega: components["schemas"]["vega_response"];
                  rho: components["schemas"]["rho_response"];
                  gamma: components["schemas"]["gamma_response"];
                };
                iv?: components["schemas"]["iv_response"];
                asset: components["schemas"]["asset_response"];
                amount: components["schemas"]["amount_response"];
                side: components["schemas"]["side_response"];
                mark_price: components["schemas"]["mark_price_response"];
                avg_entry_price: components["schemas"]["avg_entry_price_response"];
                unrealized_pnl: components["schemas"]["unrealized_pnl_response"];
                maintenance_margin: components["schemas"]["maintenance_margin_response"];
                margin_type?: components["schemas"]["margin_type_response"];
                liquidation_price?: components["schemas"]["liquidation_price_response"];
                isolated_margin?: components["schemas"]["isolated_margin_response"];
                leverage?: components["schemas"]["leverage_response"];
                triggers?: {
                  take_profit?: {
                    order_id: components["schemas"]["order_id_response"];
                    trigger: components["schemas"]["trigger_response"];
                  };
                  stop_loss?: {
                    order_id: components["schemas"]["order_id_response"];
                    trigger: components["schemas"]["trigger_response"];
                  };
                };
              }[];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /account/cancel-on-disconnect
   * @description Check the Cancel on Disconnect (CoD) setting for your account.
   */
  GetAccountCancelOnDisconnect: {
    responses: {
      /** @description Whether the Cancel on Disconnect (CoD) setting is enabled or disabled. */
      200: {
        content: {
          "application/json": {
            enabled: components["schemas"]["enabled_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/cancel-on-disconnect
   * @description Enables or disables the Cancel on Disconnect (CoD) setting for your account. When CoD is enabled, when a websocket connection is closed, all orders placed via that connection will be cancelled.
   */
  PostAccountCancelOnDisconnect: {
    requestBody?: {
      content: {
        "application/json": {
          enabled: components["schemas"]["enabled"];
        };
      };
    };
    responses: {
      /** @description Whether or not the setting was successfully updated. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/portfolio-margin
   * @description Enables or disables the portfolio margin on your acccount.
   */
  PostAccountPortfolioMargin: {
    requestBody?: {
      content: {
        "application/json": {
          enabled: components["schemas"]["enabled"];
        };
      };
    };
    responses: {
      /** @description Whether or not the setting was successfully updated. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /account/email-address
   * @description Check the Email Address for your account.
   */
  GetAccountEmailAddress: {
    responses: {
      /** @description The Email Address for your account. */
      200: {
        content: {
          "application/json": {
            email_address: components["schemas"]["email_address_response"];
            send_email_verification?: components["schemas"]["send_email_verification_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/email-address
   * @description Sets up an email address for a user.
   */
  PostAccountEmailAddress: {
    requestBody?: {
      content: {
        "application/json": {
          email_address: components["schemas"]["email_address"];
        };
      };
    };
    responses: {
      /** @description Whether or not the setting was successfully updated. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/email-preference
   * @description Sets up email preference for a user.
   */
  PostAccountEmailPreference: {
    requestBody?: {
      content: {
        "application/json": {
          email_type: components["schemas"]["email_type"];
          enabled: components["schemas"]["enabled"];
        };
      };
    };
    responses: {
      /** @description Whether or not the setting was successfully updated. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /account/email-preferences
   * @description Check the email preferences for your account.
   */
  GetAccountEmailPreferences: {
    responses: {
      /** @description The email preferences for your account. */
      200: {
        content: {
          "application/json": {
            email_preferences: components["schemas"]["email_preferences_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /account/email-verified
   * @description Check if an account's email is verified.
   */
  GetAccountEmailVerified: {
    responses: {
      /** @description Whether account email is verified */
      200: {
        content: {
          "application/json": {
            email_verified: components["schemas"]["email_verified_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/email-verified
   * @description Verify an account's email.
   */
  PostAccountEmailVerified: {
    requestBody?: {
      content: {
        "application/json": {
          account: components["schemas"]["account"];
          email_auth_token: components["schemas"]["email_auth_token"];
        };
      };
    };
    responses: {
      /** @description Is the account's email verified */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /account/accumulated-fundings
   * @description Get the accumulated funding for your account's positions.
   */
  GetAccountAccumulatedFundings: {
    responses: {
      /** @description The accumulated funding for an account's positions. */
      200: {
        content: {
          "application/json": {
            accumulated_fundings?: {
                instrument_id: components["schemas"]["instrument_id_response"];
                accumulated_funding?: components["schemas"]["accumulated_funding_response"];
              }[];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/update-margin
   * @description Update margin for your account's positions.
   */
  PostAccountUpdateMargin: {
    requestBody?: {
      content: {
        "application/json": {
          instrument: components["schemas"]["instrument"];
          isolated_margin: components["schemas"]["isolated_margin"];
        };
      };
    };
    responses: {
      /** @description Update margin for an account's positions. */
      200: {
        content: {
          "application/json": {
            success?: {
              instrument_id?: components["schemas"]["instrument_id_response"];
              instrument_name?: components["schemas"]["instrument_name_response"];
              instrument_type?: components["schemas"]["instrument_type_response"];
              option?: {
                strike: components["schemas"]["strike_response"];
                option_type: components["schemas"]["option_type_response"];
                expiry: components["schemas"]["expiry_response"];
                iv: components["schemas"]["iv_response"];
                delta: components["schemas"]["delta_response"];
                theta: components["schemas"]["theta_response"];
                vega: components["schemas"]["vega_response"];
                rho: components["schemas"]["rho_response"];
                gamma: components["schemas"]["gamma_response"];
              };
              iv?: components["schemas"]["iv_response"];
              asset?: components["schemas"]["asset_response"];
              amount?: components["schemas"]["amount_response"];
              side?: components["schemas"]["side_response"];
              mark_price?: components["schemas"]["mark_price_response"];
              avg_entry_price?: components["schemas"]["avg_entry_price_response"];
              unrealized_pnl?: components["schemas"]["unrealized_pnl_response"];
              maintenance_margin?: components["schemas"]["maintenance_margin_response"];
              margin_type?: components["schemas"]["margin_type_response"];
              liquidation_price?: components["schemas"]["liquidation_price_response"];
              isolated_margin?: components["schemas"]["isolated_margin_response"];
              leverage?: components["schemas"]["leverage_response"];
              triggers?: {
                take_profit?: {
                  order_id: components["schemas"]["order_id_response"];
                  trigger: components["schemas"]["trigger_response"];
                };
                stop_loss?: {
                  order_id: components["schemas"]["order_id_response"];
                  trigger: components["schemas"]["trigger_response"];
                };
              };
            };
            position?: {
              instrument_id: components["schemas"]["instrument_id_response"];
              instrument_name: components["schemas"]["instrument_name_response"];
              instrument_type: components["schemas"]["instrument_type_response"];
              option?: {
                strike: components["schemas"]["strike_response"];
                option_type: components["schemas"]["option_type_response"];
                expiry: components["schemas"]["expiry_response"];
                iv: components["schemas"]["iv_response"];
                delta: components["schemas"]["delta_response"];
                theta: components["schemas"]["theta_response"];
                vega: components["schemas"]["vega_response"];
                rho: components["schemas"]["rho_response"];
                gamma: components["schemas"]["gamma_response"];
              };
              iv?: components["schemas"]["iv_response"];
              asset: components["schemas"]["asset_response"];
              amount: components["schemas"]["amount_response"];
              side: components["schemas"]["side_response"];
              mark_price: components["schemas"]["mark_price_response"];
              avg_entry_price: components["schemas"]["avg_entry_price_response"];
              unrealized_pnl: components["schemas"]["unrealized_pnl_response"];
              maintenance_margin: components["schemas"]["maintenance_margin_response"];
              margin_type?: components["schemas"]["margin_type_response"];
              liquidation_price?: components["schemas"]["liquidation_price_response"];
              isolated_margin?: components["schemas"]["isolated_margin_response"];
              leverage?: components["schemas"]["leverage_response"];
              triggers?: {
                take_profit?: {
                  order_id: components["schemas"]["order_id_response"];
                  trigger: components["schemas"]["trigger_response"];
                };
                stop_loss?: {
                  order_id: components["schemas"]["order_id_response"];
                  trigger: components["schemas"]["trigger_response"];
                };
              };
            };
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/margin-type
   * @description Update margin for your account's positions.
   */
  PostAccountMarginType: {
    requestBody?: {
      content: {
        "application/json": {
          instrument: components["schemas"]["instrument"];
          margin_type: components["schemas"]["margin_type"];
        };
      };
    };
    responses: {
      /** @description Update margin for an account's positions. */
      200: {
        content: {
          "application/json": {
            success?: {
              success: components["schemas"]["success_response"];
            };
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /account/leverage
   * @description Set the leverage of an instrument for your account.
   */
  PostAccountLeverage: {
    requestBody?: {
      content: {
        "application/json": {
          instrument: components["schemas"]["instrument"];
          leverage: components["schemas"]["leverage"];
        };
      };
    };
    responses: {
      /** @description Leverage of the instrument has been set. */
      200: {
        content: {
          "application/json": {
            success?: {
              success: components["schemas"]["success_response"];
            };
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /portfolio
   * @description Returns the overall portfolio details of the account.
   */
  GetPortfolio: {
    responses: {
      /** @description Portfolio details. */
      200: {
        content: {
          "application/json": {
            balance: components["schemas"]["balance_response"];
            pnl: components["schemas"]["pnl_response"];
            realized_pnl: components["schemas"]["realized_pnl_response"];
            profit_factor: components["schemas"]["profit_factor_response"];
            win_rate: components["schemas"]["win_rate_response"];
            sharpe_ratio: components["schemas"]["sharpe_ratio_response"];
            greeks?: {
                asset?: components["schemas"]["asset_response"];
                delta: components["schemas"]["delta_response"];
                gamma: components["schemas"]["gamma_response"];
                rho: components["schemas"]["rho_response"];
                theta: components["schemas"]["theta_response"];
                vega: components["schemas"]["vega_response"];
              }[];
            user_margin?: {
              used: components["schemas"]["used_response"];
              balance: components["schemas"]["balance_response"];
            };
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /withdraw
   * @description Withdraws USDC from the exchange to L1 Ethereum.
   */
  PostWithdraw: {
    requestBody?: {
      content: {
        "application/json": {
          account: components["schemas"]["account"];
          collateral: components["schemas"]["collateral"];
          to: components["schemas"]["to"];
          amount: components["schemas"]["amount_usdc"];
          salt: components["schemas"]["salt"];
          signature: components["schemas"]["signature"];
          recipient?: components["schemas"]["recipient"];
          socket_fees?: components["schemas"]["socket_fees"];
          socket_msg_gas_limit?: components["schemas"]["socket_msg_gas_limit"];
          socket_connector?: components["schemas"]["socket_connector"];
        };
      };
    };
    responses: {
      /** @description Withdraw status. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /strategy/initiate-withdraw
   * @description Initiate a USDC withdraw from strategy.
   */
  PostStrategyInitiateWithdraw: {
    requestBody?: {
      content: {
        "application/json": {
          strategy_address: components["schemas"]["strategy_address"];
          collateral: components["schemas"]["collateral"];
          amount_float: components["schemas"]["amount_float"];
        };
      };
    };
    responses: {
      /** @description Initiate withdraw status. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /strategy/pending-transactions
   * @description Get a type of pending transactions of a strategy
   */
  PostStrategyPendingTransactions: {
    requestBody?: {
      content: {
        "application/json": {
          strategy_transaction_type: components["schemas"]["strategy_transaction_type"];
        };
      };
    };
    responses: {
      /** @description List of pending transactions. */
      200: {
        content: {
          "application/json": {
            amount_type?: {
              amount_type: components["schemas"]["amount_type_response"];
            };
            pending_transactions?: {
                account: components["schemas"]["account_response"];
                amount: components["schemas"]["amount_response"];
              }[];
            pps?: {
              amount_type?: components["schemas"]["amount_type_response"];
            };
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /transfer
   * @description Transfer USDC between accounts.
   */
  PostTransfer: {
    requestBody?: {
      content: {
        "application/json": {
          account: components["schemas"]["account"];
          collateral: components["schemas"]["collateral"];
          to: components["schemas"]["to"];
          amount: components["schemas"]["amount_usdc"];
          salt: components["schemas"]["salt"];
          signature: components["schemas"]["signature"];
          label?: components["schemas"]["label"];
        };
      };
    };
    responses: {
      /** @description Transfer status. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /orders
   * @description Returns all account's orders.
   */
  GetOrders: {
    responses: {
      /** @description Orders. */
      200: {
        content: {
          "application/json": {
              order_id: components["schemas"]["order_id_response"];
              account: components["schemas"]["account_response"];
              instrument_id: components["schemas"]["instrument_id_response"];
              instrument_name: components["schemas"]["instrument_name_response"];
              instrument_type: components["schemas"]["instrument_type_response"];
              order_type: components["schemas"]["order_type_response"];
              side: components["schemas"]["side_response"];
              amount: components["schemas"]["amount_response"];
              price: components["schemas"]["price_response"];
              avg_price: components["schemas"]["avg_price_response"];
              filled: components["schemas"]["filled_response"];
              order_status: components["schemas"]["order_status_response"];
              reduce_only?: components["schemas"]["reduce_only_response"];
              initial_margin?: components["schemas"]["initial_margin_response"];
              option_type?: components["schemas"]["option_type_response"];
              iv?: components["schemas"]["iv_response"];
              expiry?: components["schemas"]["expiry_response"];
              strike?: components["schemas"]["strike_response"];
              created_timestamp?: components["schemas"]["created_timestamp_response"];
              timestamp: components["schemas"]["timestamp_response"];
              system_type: components["schemas"]["system_type_response"];
              stop?: components["schemas"]["stop_response"];
              trigger?: components["schemas"]["trigger_response"];
              close_position?: components["schemas"]["close_position_response"];
              isolated_margin?: components["schemas"]["isolated_margin_response"];
            }[];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /orders
   * @description Creates a new order.
   */
  PostOrders: {
    requestBody?: {
      content: {
        "application/json": {
          instrument: components["schemas"]["instrument"];
          maker: components["schemas"]["maker"];
          is_buy: components["schemas"]["is_buy"];
          amount: components["schemas"]["amount"];
          limit_price: components["schemas"]["limit_price"];
          salt: components["schemas"]["salt"];
          signature: components["schemas"]["signature"];
          timestamp: components["schemas"]["timestamp"];
          post_only?: components["schemas"]["post_only"];
          reduce_only?: components["schemas"]["reduce_only"];
          time_in_force?: components["schemas"]["time_in_force"];
          mmp?: components["schemas"]["mmp"];
          stop?: components["schemas"]["stop"];
          trigger?: components["schemas"]["trigger"];
          close_position?: components["schemas"]["close_position"];
          system_type?: components["schemas"]["system_type"];
        };
      };
    };
    responses: {
      /** @description Order created. */
      200: {
        content: {
          "application/json": {
            order_id: components["schemas"]["order_id_response"];
            account: components["schemas"]["account_response"];
            instrument_id: components["schemas"]["instrument_id_response"];
            instrument_name: components["schemas"]["instrument_name_response"];
            instrument_type: components["schemas"]["instrument_type_response"];
            order_type: components["schemas"]["order_type_response"];
            side: components["schemas"]["side_response"];
            amount: components["schemas"]["amount_response"];
            price: components["schemas"]["price_response"];
            avg_price: components["schemas"]["avg_price_response"];
            filled: components["schemas"]["filled_response"];
            order_status: components["schemas"]["order_status_response"];
            reduce_only?: components["schemas"]["reduce_only_response"];
            initial_margin?: components["schemas"]["initial_margin_response"];
            option_type?: components["schemas"]["option_type_response"];
            iv?: components["schemas"]["iv_response"];
            expiry?: components["schemas"]["expiry_response"];
            strike?: components["schemas"]["strike_response"];
            created_timestamp?: components["schemas"]["created_timestamp_response"];
            timestamp: components["schemas"]["timestamp_response"];
            system_type: components["schemas"]["system_type_response"];
            stop?: components["schemas"]["stop_response"];
            trigger?: components["schemas"]["trigger_response"];
            close_position?: components["schemas"]["close_position_response"];
            isolated_margin?: components["schemas"]["isolated_margin_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /orders/{order_id}
   * @description Returns the order details.
   */
  GetOrdersOrderId: {
    parameters: {
      path: {
        order_id: components["parameters"]["OrderIdPath"];
      };
    };
    responses: {
      /** @description Order details. */
      200: {
        content: {
          "application/json": {
            order_id: components["schemas"]["order_id_response"];
            account: components["schemas"]["account_response"];
            instrument_id: components["schemas"]["instrument_id_response"];
            instrument_name: components["schemas"]["instrument_name_response"];
            instrument_type: components["schemas"]["instrument_type_response"];
            order_type: components["schemas"]["order_type_response"];
            side: components["schemas"]["side_response"];
            amount: components["schemas"]["amount_response"];
            price: components["schemas"]["price_response"];
            avg_price: components["schemas"]["avg_price_response"];
            filled: components["schemas"]["filled_response"];
            order_status: components["schemas"]["order_status_response"];
            reduce_only?: components["schemas"]["reduce_only_response"];
            initial_margin?: components["schemas"]["initial_margin_response"];
            option_type?: components["schemas"]["option_type_response"];
            iv?: components["schemas"]["iv_response"];
            expiry?: components["schemas"]["expiry_response"];
            strike?: components["schemas"]["strike_response"];
            created_timestamp?: components["schemas"]["created_timestamp_response"];
            timestamp: components["schemas"]["timestamp_response"];
            system_type: components["schemas"]["system_type_response"];
            stop?: components["schemas"]["stop_response"];
            trigger?: components["schemas"]["trigger_response"];
            close_position?: components["schemas"]["close_position_response"];
            isolated_margin?: components["schemas"]["isolated_margin_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /orders/{order_id}
   * @description Edits an existing order.
   */
  PostOrdersOrderId: {
    parameters: {
      path: {
        order_id: components["parameters"]["OrderIdPath"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          instrument: components["schemas"]["instrument"];
          maker: components["schemas"]["maker"];
          is_buy: components["schemas"]["is_buy"];
          amount: components["schemas"]["amount"];
          limit_price: components["schemas"]["limit_price"];
          salt: components["schemas"]["salt"];
          signature: components["schemas"]["signature"];
          timestamp: components["schemas"]["timestamp"];
          post_only?: components["schemas"]["post_only"];
          reduce_only?: components["schemas"]["reduce_only"];
          time_in_force?: components["schemas"]["time_in_force"];
          mmp?: components["schemas"]["mmp"];
          stop?: components["schemas"]["stop"];
          trigger?: components["schemas"]["trigger"];
          close_position?: components["schemas"]["close_position"];
          system_type?: components["schemas"]["system_type"];
        };
      };
    };
    responses: {
      /** @description New order created. */
      200: {
        content: {
          "application/json": {
            order_id: components["schemas"]["order_id_response"];
            account: components["schemas"]["account_response"];
            instrument_id: components["schemas"]["instrument_id_response"];
            instrument_name: components["schemas"]["instrument_name_response"];
            instrument_type: components["schemas"]["instrument_type_response"];
            order_type: components["schemas"]["order_type_response"];
            side: components["schemas"]["side_response"];
            amount: components["schemas"]["amount_response"];
            price: components["schemas"]["price_response"];
            avg_price: components["schemas"]["avg_price_response"];
            filled: components["schemas"]["filled_response"];
            order_status: components["schemas"]["order_status_response"];
            reduce_only?: components["schemas"]["reduce_only_response"];
            initial_margin?: components["schemas"]["initial_margin_response"];
            option_type?: components["schemas"]["option_type_response"];
            iv?: components["schemas"]["iv_response"];
            expiry?: components["schemas"]["expiry_response"];
            strike?: components["schemas"]["strike_response"];
            created_timestamp?: components["schemas"]["created_timestamp_response"];
            timestamp: components["schemas"]["timestamp_response"];
            system_type: components["schemas"]["system_type_response"];
            stop?: components["schemas"]["stop_response"];
            trigger?: components["schemas"]["trigger_response"];
            close_position?: components["schemas"]["close_position_response"];
            isolated_margin?: components["schemas"]["isolated_margin_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /orders/{order_id}
   * @description Cancels an order.
   */
  DeleteOrdersOrderId: {
    parameters: {
      path: {
        order_id: components["parameters"]["OrderIdPath"];
      };
    };
    responses: {
      /** @description Order cancellation. */
      200: {
        content: {
          "application/json": {
            order_id: components["schemas"]["order_id_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /orders-all
   * @description Cancel all orders. Optionally, you can specify an asset and instrument type to cancel only orders for that asset/instrument type.
   */
  DeleteOrdersAll: {
    requestBody?: {
      content: {
        "application/json": {
          asset?: components["schemas"]["asset"];
          instrument_type?: components["schemas"]["instrument_type"];
        };
      };
    };
    responses: {
      /** @description Order cancellation status. If any orders were successfully cancelled, they will be found in the `order_ids` field. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
            /**
             * order_id_array
             * @description Order ID is the hash of the order payload
             * @example [
             *   "0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8"
             * ]
             */
            order_ids?: components["schemas"]["order_id_response"][];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /order-history
   * @description Returns order history for the account.
   */
  GetOrderHistory: {
    parameters: {
      query: {
        start_time: components["parameters"]["StartTimeQuery"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
        sort?: components["parameters"]["SortQueryOptional"];
        sort_order?: components["parameters"]["SortOrderQueryOptional"];
      };
    };
    responses: {
      /** @description Order history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            order_history?: {
                order_id: components["schemas"]["order_id_response"];
                account: components["schemas"]["account_response"];
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                order_type: components["schemas"]["order_type_response"];
                side: components["schemas"]["side_response"];
                amount: components["schemas"]["amount_response"];
                price: components["schemas"]["price_response"];
                filled: components["schemas"]["filled_response"];
                error?: components["schemas"]["error_response"];
                option_type?: components["schemas"]["option_type_response"];
                expiry?: components["schemas"]["expiry_response"];
                strike?: components["schemas"]["strike_response"];
                stop?: components["schemas"]["stop_response"];
                stop_type?: components["schemas"]["stop_type_response"];
                trigger?: components["schemas"]["trigger_response"];
                order_status: components["schemas"]["order_status_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /order-history/stops
   * @description Returns stop order history for the account.
   */
  GetOrderHistoryStops: {
    parameters: {
      query: {
        start_time: components["parameters"]["StartTimeQuery"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
        sort?: components["parameters"]["SortQueryOptional"];
        sort_order?: components["parameters"]["SortOrderQueryOptional"];
      };
    };
    responses: {
      /** @description Stop order history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            order_history?: {
                order_id: components["schemas"]["order_id_response"];
                account: components["schemas"]["account_response"];
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                order_type: components["schemas"]["order_type_response"];
                side: components["schemas"]["side_response"];
                amount: components["schemas"]["amount_response"];
                price: components["schemas"]["price_response"];
                filled: components["schemas"]["filled_response"];
                error?: components["schemas"]["error_response"];
                option_type?: components["schemas"]["option_type_response"];
                expiry?: components["schemas"]["expiry_response"];
                strike?: components["schemas"]["strike_response"];
                stop?: components["schemas"]["stop_response"];
                stop_type?: components["schemas"]["stop_type_response"];
                trigger?: components["schemas"]["trigger_response"];
                order_status: components["schemas"]["order_status_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
                total_matched_amount?: components["schemas"]["total_matched_amount_response"];
                trade_id?: components["schemas"]["trade_id_response"];
                avg_price?: components["schemas"]["avg_price_response"];
                entry_price?: components["schemas"]["entry_price_response"];
                spot_price?: components["schemas"]["spot_price_response"];
                fees?: components["schemas"]["fees_response"];
                is_closing?: components["schemas"]["is_closing_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /trade-history
   * @description Return the account's trade history.
   */
  GetTradeHistory: {
    parameters: {
      query: {
        start_time: components["parameters"]["StartTimeQuery"];
        asset?: components["parameters"]["AssetQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        trade_types?: components["parameters"]["TradeTypesQueryOptional"];
        instrument_type?: components["parameters"]["InstrumentTypeQueryOptional"];
        option_type?: components["parameters"]["OptionTypeQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        agg?: components["parameters"]["AggQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
        sort?: components["parameters"]["SortQueryOptional"];
        sort_order?: components["parameters"]["SortOrderQueryOptional"];
      };
    };
    responses: {
      /** @description Trade history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            trade_history?: {
                trade_id: components["schemas"]["trade_id_response"];
                order_id?: components["schemas"]["order_id_response"];
                trade_type: components["schemas"]["trade_type_response"];
                account: components["schemas"]["account_response"];
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                asset: components["schemas"]["asset_response"];
                spot_price?: components["schemas"]["spot_price_response"];
                amount: components["schemas"]["amount_response"];
                price?: components["schemas"]["price_response"];
                avg_price?: components["schemas"]["avg_price_response"];
                mark_price?: components["schemas"]["mark_price_response"];
                side: components["schemas"]["side_response"];
                fees: components["schemas"]["fees_response"];
                liquidity?: components["schemas"]["liquidity_response"];
                iv?: components["schemas"]["iv_response"];
                fee_rate?: components["schemas"]["fee_rate_response"];
                pnl?: components["schemas"]["pnl_response"];
                payout?: components["schemas"]["payout_response"];
                strike?: components["schemas"]["strike_response"];
                option_type?: components["schemas"]["option_type_response"];
                expiry?: components["schemas"]["expiry_response"];
                order_type?: components["schemas"]["order_type_response"];
                agg_order_id?: components["schemas"]["agg_order_id_response"];
                trade_status?: components["schemas"]["trade_status_response"];
                settlement_price?: components["schemas"]["settlement_price_response"];
                liquidation_fee?: components["schemas"]["liquidation_fee_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
                avg_entry_price?: components["schemas"]["avg_entry_price_response"];
                is_closing?: components["schemas"]["is_closing_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /transaction-history
   * @description Return the account's deposit and withdraw history.
   */
  GetTransactionHistory: {
    parameters: {
      query?: {
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        tx_type?: components["parameters"]["TxTypeQueryOptional"];
        tx_status?: components["parameters"]["TxStatusQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
        sort?: components["parameters"]["SortQueryOptional"];
        sort_order?: components["parameters"]["SortOrderQueryOptional"];
      };
    };
    responses: {
      /** @description Transaction history */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            transaction_history?: {
                account: components["schemas"]["account_response"];
                amount: components["schemas"]["amount_response"];
                collateral: components["schemas"]["collateral_response"];
                counter_party?: components["schemas"]["counter_party_response"];
                transfer_details?: {
                  description: components["schemas"]["description_response"];
                  link: components["schemas"]["link_response"];
                };
                finalized_timestamp: components["schemas"]["finalized_timestamp_response"];
                initiated_timestamp: components["schemas"]["initiated_timestamp_response"];
                l1_tx_hash: components["schemas"]["l1_tx_hash_response"];
                l2_tx_hash: components["schemas"]["l2_tx_hash_response"];
                chain_id: components["schemas"]["chain_id_response"];
                tx_status: components["schemas"]["tx_status_response"];
                tx_type: components["schemas"]["tx_type_response"];
                label?: components["schemas"]["label_response"];
                swap_asset?: components["schemas"]["swap_asset_response"];
                side?: components["schemas"]["side_response"];
                fees?: components["schemas"]["fees_response"];
                price?: components["schemas"]["price_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /referral-rewards-history
   * @description Return the account's referral rewards history.
   */
  GetReferralRewardsHistory: {
    parameters: {
      query?: {
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
      };
    };
    responses: {
      /** @description Referral rewards history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            referral_rewards_history?: {
                reward_type: components["schemas"]["reward_type_response"];
                rewards: components["schemas"]["rewards_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /referral-history
   * @description Return the account's referral history.
   */
  GetReferralHistory: {
    parameters: {
      query?: {
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
      };
    };
    responses: {
      /** @description Referral history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            referral_history?: {
                referee: components["schemas"]["referee_response"];
                referee_username: components["schemas"]["referee_username_response"];
                total_volume: components["schemas"]["total_volume_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /referral-statistics
   * @description Return the account's referral statistics.
   */
  GetReferralStatistics: {
    parameters: {
      query?: {
        start_time?: components["parameters"]["StartTimeQueryOptional"];
      };
    };
    responses: {
      /** @description Referral statistics. */
      200: {
        content: {
          "application/json": {
            referred: components["schemas"]["referred_response"];
            volume: components["schemas"]["volume_response"];
            total_rewards: components["schemas"]["total_rewards_response"];
            total_referral_bonus: components["schemas"]["total_referral_bonus_response"];
            total_referee_discount: components["schemas"]["total_referee_discount_response"];
            total_rewards_unclaimed: components["schemas"]["total_rewards_unclaimed_response"];
            total_referral_bonus_unclaimed: components["schemas"]["total_referral_bonus_unclaimed_response"];
            total_referee_discount_unclaimed: components["schemas"]["total_referee_discount_unclaimed_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /claim-referral-rewards
   * @description User claims referral rewards
   */
  PostClaimReferralRewards: {
    responses: {
      /** @description Claim Successful */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /mmp
   * @description Get market maker protection (MMP) setting.
   */
  GetMmp: {
    parameters: {
      query: {
        asset: components["parameters"]["AssetQuery"];
      };
    };
    responses: {
      /** @description Market maker protection (MMP) setting. */
      200: {
        content: {
          "application/json": {
            enabled: components["schemas"]["enabled_response"];
            triggered: components["schemas"]["triggered_response"];
            interval?: components["schemas"]["interval_response"];
            frozen?: components["schemas"]["frozen_response"];
            frozen_end_time?: components["schemas"]["frozen_end_time_response"];
            amount_limit?: components["schemas"]["amount_limit_response"];
            delta_limit?: components["schemas"]["delta_limit_response"];
            amount_change?: components["schemas"]["amount_change_response"];
            delta_change?: components["schemas"]["delta_change_response"];
            asset: components["schemas"]["asset_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /mmp
   * @description Sets market maker protection (MMP) settings.
   */
  PostMmp: {
    requestBody?: {
      content: {
        "application/json": {
          interval: components["schemas"]["interval"];
          frozen: components["schemas"]["frozen"];
          amount_limit: components["schemas"]["amount_limit"];
          delta_limit?: components["schemas"]["delta_limit"];
          asset: components["schemas"]["asset"];
        };
      };
    };
    responses: {
      /** @description Setting successful. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /reset-mmp
   * @description Reset market maker protection (MMP).
   */
  PostResetMmp: {
    requestBody?: {
      content: {
        "application/json": {
          asset: components["schemas"]["asset"];
        };
      };
    };
    responses: {
      /** @description Reset successful. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /rfqs
   * @description Get RFQ blocks open for trading.
   */
  GetRfqs: {
    parameters: {
      query?: {
        role?: components["parameters"]["RoleQueryOptional"];
      };
    };
    responses: {
      /** @description List of RFQ blocks. */
      200: {
        content: {
          "application/json": {
            blocks?: {
                block_id: components["schemas"]["block_id_response"];
                legs?: {
                    instrument_id: components["schemas"]["instrument_id_response"];
                    instrument_name: components["schemas"]["instrument_name_response"];
                    instrument_type: components["schemas"]["instrument_type_response"];
                    side: components["schemas"]["side_response"];
                    ratio: components["schemas"]["ratio_response"];
                    asset: components["schemas"]["asset_response"];
                    index_price: components["schemas"]["index_price_response"];
                    mark_price: components["schemas"]["mark_price_response"];
                    expiry?: components["schemas"]["expiry_response"];
                    strike?: components["schemas"]["strike_response"];
                    option_type?: components["schemas"]["option_type_response"];
                    iv?: components["schemas"]["iv_response"];
                    price_precision: components["schemas"]["price_precision_response"];
                  }[];
                block_status: components["schemas"]["block_status_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
                deadline: components["schemas"]["deadline_response"];
                orderbook?: {
                  /**
                   * asks_array
                   * @description Array of 2 elements, price in USD and contract amount e.g. [1650, 1].
                   * @example [
                   *   [
                   *     "1",
                   *     "100",
                   *     "12"
                   *   ]
                   * ]
                   */
                  asks?: components["schemas"]["asks_response"][];
                  /**
                   * bids_array
                   * @description Array of 2 elements, price in USD and contract amount e.g. [1650, 1].
                   * @example [
                   *   [
                   *     "1650",
                   *     "1",
                   *     "12"
                   *   ]
                   * ]
                   */
                  bids?: components["schemas"]["bids_response"][];
                };
                mark_price: components["schemas"]["mark_price_response"];
                amount: components["schemas"]["amount_response"];
                amount_precision: components["schemas"]["amount_precision_response"];
                full_size: components["schemas"]["full_size_response"];
                is_buy?: components["schemas"]["is_buy_response"];
                role?: components["schemas"]["role_response"];
              }[];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /rfqs
   * @description Create a new RFQ block.
   */
  PostRfqs: {
    requestBody?: {
      content: {
        "application/json": {
          legs?: {
              instrument: components["schemas"]["instrument"];
              is_buy: components["schemas"]["is_buy"];
              ratio: components["schemas"]["ratio"];
            }[];
          full_size?: components["schemas"]["full_size"];
          is_buy?: components["schemas"]["is_buy"];
          amount?: components["schemas"]["amount"];
          duration?: components["schemas"]["duration"];
          counterparties?: components["schemas"]["counterparties"];
        };
      };
    };
    responses: {
      /** @description RFQ block created. */
      200: {
        content: {
          "application/json": {
            blocks?: {
                block_id: components["schemas"]["block_id_response"];
                legs?: {
                    instrument_id: components["schemas"]["instrument_id_response"];
                    instrument_name: components["schemas"]["instrument_name_response"];
                    instrument_type: components["schemas"]["instrument_type_response"];
                    side: components["schemas"]["side_response"];
                    ratio: components["schemas"]["ratio_response"];
                    asset: components["schemas"]["asset_response"];
                    index_price: components["schemas"]["index_price_response"];
                    mark_price: components["schemas"]["mark_price_response"];
                    expiry?: components["schemas"]["expiry_response"];
                    strike?: components["schemas"]["strike_response"];
                    option_type?: components["schemas"]["option_type_response"];
                    iv?: components["schemas"]["iv_response"];
                    price_precision: components["schemas"]["price_precision_response"];
                  }[];
                block_status: components["schemas"]["block_status_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
                deadline: components["schemas"]["deadline_response"];
                orderbook?: {
                  /**
                   * bids_array
                   * @description Array of 3 elements, price in USD, contract amount, and IV respectively.
                   * @example [
                   *   [
                   *     "1",
                   *     "100",
                   *     "12"
                   *   ]
                   * ]
                   */
                  bids?: components["schemas"]["bids_response"][];
                  /**
                   * asks_array
                   * @description Array of 3 elements, price in USD, contract amount, and IV respectively.
                   * @example [
                   *   [
                   *     "1",
                   *     "100",
                   *     "12"
                   *   ]
                   * ]
                   */
                  asks?: components["schemas"]["asks_response"][];
                };
                mark_price: components["schemas"]["mark_price_response"];
                amount: components["schemas"]["amount_response"];
                amount_precision: components["schemas"]["amount_precision_response"];
                full_size: components["schemas"]["full_size_response"];
                is_buy: components["schemas"]["is_buy_response"];
                role?: components["schemas"]["role_response"];
              }[];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /rfqs
   * @description Cancel all blocks.
   */
  DeleteRfqs: {
    responses: {
      /** @description Block cancellation status. If any blocks were successfully cancelled, they will be found in the `cancelled` field. */
      200: {
        content: {
          "application/json": {
            /**
             * block_id_array
             * @description Block ID is the unique identifier of the block
             * @example [
             *   "0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8"
             * ]
             */
            cancelled?: components["schemas"]["block_id_response"][];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /rfqs/{block_id}
   * @description Close an RFQ block
   */
  DeleteRfqsBlockId: {
    parameters: {
      path: {
        block_id: components["parameters"]["BlockIdPath"];
      };
    };
    responses: {
      /** @description Block cancellation. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /rfqs/{block_id}/quotes
   * @description Get the quotes for a given RFQ block.
   */
  GetRfqsBlockIdQuotes: {
    parameters: {
      path: {
        block_id: components["parameters"]["BlockIdPath"];
      };
    };
    responses: {
      /** @description List of RFQ quotes. */
      200: {
        content: {
          "application/json": {
            block_id: components["schemas"]["block_id_response"];
            asks?: {
                quote_id: components["schemas"]["quote_id_response"];
                amount: components["schemas"]["amount_response"];
                is_buy: components["schemas"]["is_buy_response"];
                limit_price: components["schemas"]["limit_price_response"];
                legs?: {
                    instrument_id: components["schemas"]["instrument_id_response"];
                    instrument_name: components["schemas"]["instrument_name_response"];
                    side: components["schemas"]["side_response"];
                    price: components["schemas"]["price_response"];
                    iv?: components["schemas"]["iv_response"];
                  }[];
                quote_status: components["schemas"]["quote_status_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
            bids?: {
                quote_id: components["schemas"]["quote_id_response"];
                amount: components["schemas"]["amount_response"];
                is_buy: components["schemas"]["is_buy_response"];
                limit_price: components["schemas"]["limit_price_response"];
                legs?: {
                    instrument_id: components["schemas"]["instrument_id_response"];
                    instrument_name: components["schemas"]["instrument_name_response"];
                    side: components["schemas"]["side_response"];
                    price: components["schemas"]["price_response"];
                    iv?: components["schemas"]["iv_response"];
                  }[];
                quote_status: components["schemas"]["quote_status_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * GET /quotes
   * @description Returns all account's quotes.
   */
  GetQuotes: {
    responses: {
      /** @description Quotes. */
      200: {
        content: {
          "application/json": {
            quotes?: {
                block_id: components["schemas"]["block_id_response"];
                quote_id: components["schemas"]["quote_id_response"];
                amount: components["schemas"]["amount_response"];
                limit_price: components["schemas"]["limit_price_response"];
                quote_status: components["schemas"]["quote_status_response"];
                is_buy: components["schemas"]["is_buy_response"];
                legs?: {
                    instrument_id: components["schemas"]["instrument_id_response"];
                    instrument_name: components["schemas"]["instrument_name_response"];
                    instrument_type: components["schemas"]["instrument_type_response"];
                    side: components["schemas"]["side_response"];
                    ratio: components["schemas"]["ratio_response"];
                    price: components["schemas"]["price_response"];
                    asset: components["schemas"]["asset_response"];
                    index_price: components["schemas"]["index_price_response"];
                    mark_price: components["schemas"]["mark_price_response"];
                    expiry?: components["schemas"]["expiry_response"];
                    strike?: components["schemas"]["strike_response"];
                    option_type?: components["schemas"]["option_type_response"];
                    iv?: components["schemas"]["iv_response"];
                  }[];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /quotes
   * @description Creates a new quote.
   */
  PostQuotes: {
    requestBody?: {
      content: {
        "application/json": {
          block_id: components["schemas"]["block_id"];
          account: components["schemas"]["account"];
          amount: components["schemas"]["amount"];
          is_buy: components["schemas"]["is_buy"];
          salt: components["schemas"]["salt"];
          timestamp: components["schemas"]["timestamp"];
          signature: components["schemas"]["signature"];
          legs?: {
              instrument: components["schemas"]["instrument"];
              price: components["schemas"]["price"];
            }[];
          limit_price?: components["schemas"]["limit_price"];
          system_type?: components["schemas"]["system_type"];
        };
      };
    };
    responses: {
      /** @description Quote created. */
      200: {
        content: {
          "application/json": {
            block_id: components["schemas"]["block_id_response"];
            quote_id: components["schemas"]["quote_id_response"];
            amount: components["schemas"]["amount_response"];
            initial_margin: components["schemas"]["initial_margin_response"];
            filled: components["schemas"]["filled_response"];
            limit_price: components["schemas"]["limit_price_response"];
            quote_status: components["schemas"]["quote_status_response"];
            legs?: {
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                side: components["schemas"]["side_response"];
                ratio: components["schemas"]["ratio_response"];
                price: components["schemas"]["price_response"];
                asset: components["schemas"]["asset_response"];
                index_price: components["schemas"]["index_price_response"];
                mark_price: components["schemas"]["mark_price_response"];
                expiry?: components["schemas"]["expiry_response"];
                strike?: components["schemas"]["strike_response"];
                option_type?: components["schemas"]["option_type_response"];
                iv?: components["schemas"]["iv_response"];
              }[];
            avg_price?: components["schemas"]["avg_price_response"];
            created_timestamp: components["schemas"]["created_timestamp_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /quotes
   * @description Cancel multiple quotes.
   */
  DeleteQuotes: {
    parameters: {
      query?: {
        quote_ids?: components["parameters"]["QuoteIdsQueryOptional"];
        block_id?: components["parameters"]["BlockIdQueryOptional"];
      };
    };
    responses: {
      /** @description Quote cancellation status. If any quote were successfully cancelled, they will be found in the `cancelled` field. */
      200: {
        content: {
          "application/json": {
            /**
             * quote_id_array
             * @description Quote ID is the hash of the quote payload
             * @example [
             *   "0x4c43e0ab72a4edb72dfe4b129148899815d816837b9a7e22d964b884834639f8"
             * ]
             */
            cancelled?: components["schemas"]["quote_id_response"][];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /quotes/preview
   * @description Simulate a new quote.
   */
  PostQuotesPreview: {
    requestBody?: {
      content: {
        "application/json": {
          block_id: components["schemas"]["block_id"];
          account: components["schemas"]["account"];
          amount: components["schemas"]["amount"];
          is_buy: components["schemas"]["is_buy"];
          salt: components["schemas"]["salt"];
          timestamp: components["schemas"]["timestamp"];
          signature: components["schemas"]["signature"];
          legs?: {
              instrument: components["schemas"]["instrument"];
              price: components["schemas"]["price"];
            }[];
          limit_price?: components["schemas"]["limit_price"];
          system_type?: components["schemas"]["system_type"];
        };
      };
    };
    responses: {
      /** @description Quote created. */
      200: {
        content: {
          "application/json": {
            block_id: components["schemas"]["block_id_response"];
            quote_id: components["schemas"]["quote_id_response"];
            amount: components["schemas"]["amount_response"];
            initial_margin: components["schemas"]["initial_margin_response"];
            filled: components["schemas"]["filled_response"];
            limit_price: components["schemas"]["limit_price_response"];
            quote_status: components["schemas"]["quote_status_response"];
            legs?: {
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                side: components["schemas"]["side_response"];
                ratio: components["schemas"]["ratio_response"];
                price: components["schemas"]["price_response"];
                asset: components["schemas"]["asset_response"];
                index_price: components["schemas"]["index_price_response"];
                mark_price: components["schemas"]["mark_price_response"];
                expiry?: components["schemas"]["expiry_response"];
                strike?: components["schemas"]["strike_response"];
                option_type?: components["schemas"]["option_type_response"];
                iv?: components["schemas"]["iv_response"];
              }[];
            avg_price?: components["schemas"]["avg_price_response"];
            created_timestamp: components["schemas"]["created_timestamp_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * PUT /quotes/{quote_id}
   * @description Edits an existing quote.
   */
  PutQuotesQuoteId: {
    parameters: {
      path: {
        quote_id: components["parameters"]["QuoteIdPath"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          block_id: components["schemas"]["block_id"];
          account: components["schemas"]["account"];
          amount: components["schemas"]["amount"];
          is_buy: components["schemas"]["is_buy"];
          salt: components["schemas"]["salt"];
          timestamp: components["schemas"]["timestamp"];
          signature: components["schemas"]["signature"];
          legs?: {
              instrument: components["schemas"]["instrument"];
              price: components["schemas"]["price"];
            }[];
          limit_price?: components["schemas"]["limit_price"];
          system_type?: components["schemas"]["system_type"];
        };
      };
    };
    responses: {
      /** @description New quote created. */
      200: {
        content: {
          "application/json": {
            block_id: components["schemas"]["block_id_response"];
            quote_id: components["schemas"]["quote_id_response"];
            amount: components["schemas"]["amount_response"];
            initial_margin: components["schemas"]["initial_margin_response"];
            filled: components["schemas"]["filled_response"];
            limit_price: components["schemas"]["limit_price_response"];
            quote_status: components["schemas"]["quote_status_response"];
            legs?: {
                instrument_id: components["schemas"]["instrument_id_response"];
                instrument_name: components["schemas"]["instrument_name_response"];
                instrument_type: components["schemas"]["instrument_type_response"];
                side: components["schemas"]["side_response"];
                ratio: components["schemas"]["ratio_response"];
                price: components["schemas"]["price_response"];
                asset: components["schemas"]["asset_response"];
                index_price: components["schemas"]["index_price_response"];
                mark_price: components["schemas"]["mark_price_response"];
                expiry?: components["schemas"]["expiry_response"];
                strike?: components["schemas"]["strike_response"];
                option_type?: components["schemas"]["option_type_response"];
                iv?: components["schemas"]["iv_response"];
              }[];
            avg_price?: components["schemas"]["avg_price_response"];
            created_timestamp: components["schemas"]["created_timestamp_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * DELETE /quotes/{quote_id}
   * @description Cancels an quote.
   */
  DeleteQuotesQuoteId: {
    parameters: {
      path: {
        quote_id: components["parameters"]["QuoteIdPath"];
      };
    };
    responses: {
      /** @description Quote cancellation. */
      200: {
        content: {
          "application/json": {
            success: components["schemas"]["success_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /block-history
   * @description Return the account's block history.
   */
  GetBlockHistory: {
    parameters: {
      query?: {
        block_id?: components["parameters"]["BlockIdQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        sort_order?: components["parameters"]["SortOrderQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
      };
    };
    responses: {
      /** @description Block history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            block_history?: {
                block_id: components["schemas"]["block_id_response"];
                account: components["schemas"]["account_response"];
                duration: components["schemas"]["duration_response"];
                deadline: components["schemas"]["deadline_response"];
                block_status: components["schemas"]["block_status_response"];
                updated_timestamp: components["schemas"]["updated_timestamp_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
                legs?: {
                    instrument_id: components["schemas"]["instrument_id_response"];
                    instrument_name: components["schemas"]["instrument_name_response"];
                    instrument_type: components["schemas"]["instrument_type_response"];
                    side: components["schemas"]["side_response"];
                    ratio: components["schemas"]["ratio_response"];
                    asset: components["schemas"]["asset_response"];
                    expiry?: components["schemas"]["expiry_response"];
                    strike?: components["schemas"]["strike_response"];
                    option_type?: components["schemas"]["option_type_response"];
                  }[];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /quote-history
   * @description Return the account's quote history.
   */
  GetQuoteHistory: {
    parameters: {
      query?: {
        quote_id?: components["parameters"]["QuoteIdQueryOptional"];
        block_id?: components["parameters"]["BlockIdQueryOptional"];
        role?: components["parameters"]["RoleQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        sort_order?: components["parameters"]["SortOrderQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
      };
    };
    responses: {
      /** @description Quote history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            quote_history?: {
                quote_id: components["schemas"]["quote_id_response"];
                block_id: components["schemas"]["block_id_response"];
                account: components["schemas"]["account_response"];
                side: components["schemas"]["side_response"];
                amount: components["schemas"]["amount_response"];
                limit_price: components["schemas"]["limit_price_response"];
                filled: components["schemas"]["filled_response"];
                quote_status: components["schemas"]["quote_status_response"];
                legs?: {
                    instrument_id: components["schemas"]["instrument_id_response"];
                    instrument_name: components["schemas"]["instrument_name_response"];
                    instrument_type: components["schemas"]["instrument_type_response"];
                    side: components["schemas"]["side_response"];
                    ratio: components["schemas"]["ratio_response"];
                    price?: components["schemas"]["price_response"];
                    asset: components["schemas"]["asset_response"];
                    expiry?: components["schemas"]["expiry_response"];
                    strike?: components["schemas"]["strike_response"];
                    option_type?: components["schemas"]["option_type_response"];
                  }[];
                updated_timestamp: components["schemas"]["updated_timestamp_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /block-trade-history
   * @description Return the account's block trade history.
   */
  GetBlockTradeHistory: {
    parameters: {
      query?: {
        block_id?: components["parameters"]["BlockIdQueryOptional"];
        start_time?: components["parameters"]["StartTimeQueryOptional"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        sort_order?: components["parameters"]["SortOrderQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
        offset?: components["parameters"]["OffsetQueryOptional"];
      };
    };
    responses: {
      /** @description Block trade history. */
      200: {
        content: {
          "application/json": {
            count: components["schemas"]["count_response"];
            block_history?: {
                block_trade_id: components["schemas"]["block_trade_id_response"];
                block_id: components["schemas"]["block_id_response"];
                aggressing_quote_id: components["schemas"]["aggressing_quote_id_response"];
                account: components["schemas"]["account_response"];
                side: components["schemas"]["side_response"];
                amount: components["schemas"]["amount_response"];
                price: components["schemas"]["price_response"];
                fees: components["schemas"]["fees_response"];
                created_timestamp: components["schemas"]["created_timestamp_response"];
              }[];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * POST /swap
   * @description Swaps collateral.
   */
  PostSwap: {
    requestBody?: {
      content: {
        "application/json": {
          collateral_asset: components["schemas"]["collateral_asset"];
          is_buy: components["schemas"]["is_buy"];
          base_amount?: components["schemas"]["base_amount"];
          quote_amount?: components["schemas"]["quote_amount"];
        };
      };
    };
    responses: {
      /** @description Order created. */
      200: {
        content: {
          "application/json": {
            order_id: components["schemas"]["order_id_response"];
            account: components["schemas"]["account_response"];
            instrument_id: components["schemas"]["instrument_id_response"];
            instrument_name: components["schemas"]["instrument_name_response"];
            instrument_type: components["schemas"]["instrument_type_response"];
            order_type: components["schemas"]["order_type_response"];
            side: components["schemas"]["side_response"];
            amount: components["schemas"]["amount_response"];
            price: components["schemas"]["price_response"];
            avg_price: components["schemas"]["avg_price_response"];
            filled: components["schemas"]["filled_response"];
            order_status: components["schemas"]["order_status_response"];
            reduce_only?: components["schemas"]["reduce_only_response"];
            initial_margin?: components["schemas"]["initial_margin_response"];
            option_type?: components["schemas"]["option_type_response"];
            iv?: components["schemas"]["iv_response"];
            expiry?: components["schemas"]["expiry_response"];
            strike?: components["schemas"]["strike_response"];
            created_timestamp?: components["schemas"]["created_timestamp_response"];
            timestamp: components["schemas"]["timestamp_response"];
            system_type: components["schemas"]["system_type_response"];
            stop?: components["schemas"]["stop_response"];
            trigger?: components["schemas"]["trigger_response"];
            close_position?: components["schemas"]["close_position_response"];
            isolated_margin?: components["schemas"]["isolated_margin_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /analytics
   * @description Analytics for authenticated accounts
   */
  GetAnalytics: {
    responses: {
      /** @description Analytics information. */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /margin
   * @description Get the margin requirement.
   */
  GetMargin: {
    parameters: {
      query: {
        instrument_id: components["parameters"]["InstrumentIdQuery"];
        is_buy: components["parameters"]["IsBuyQuery"];
        limit_price: components["parameters"]["LimitPriceQuery"];
        amount: components["parameters"]["AmountQuery"];
        order_id?: components["parameters"]["OrderIdQueryOptional"];
      };
    };
    responses: {
      /** @description Margin requirement. */
      200: {
        content: {
          "application/json": {
            initial_margin: components["schemas"]["initial_margin_response"];
            liquidation_price?: components["schemas"]["liquidation_price_response"];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /balance-history
   * @description Return the account's balance history.
   */
  GetBalanceHistory: {
    parameters: {
      query: {
        start_time: components["parameters"]["StartTimeQuery"];
        end_time?: components["parameters"]["EndTimeQueryOptional"];
        resolution?: components["parameters"]["ResolutionQueryOptional"];
      };
    };
    responses: {
      /** @description Balance history. */
      200: {
        content: {
          "application/json": {
            /**
             * history_array
             * @description List of [timestamp, price]. Timestamp is in UNIX nanoseconds.
             * @example [
             *   [
             *     "1680249600000000000",
             *     "1323.45"
             *   ]
             * ]
             */
            history?: components["schemas"]["history_response"][];
          };
        };
      };
      /** @description Bad request. */
      400: {
        content: {
          "application/json": {
            error: components["schemas"]["error_400_response"];
          };
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL GET /notifications
   * @description Returns the account's notification history.
   */
  GetNotifications: {
    parameters: {
      query?: {
        unread?: components["parameters"]["UnreadQueryOptional"];
        limit?: components["parameters"]["LimitQueryOptional"];
      };
    };
    responses: {
      /** @description Notifications. */
      200: {
        content: {
          "application/json": {
              account: components["schemas"]["account_response"];
              is_read: components["schemas"]["is_read_response"];
              notification_type: components["schemas"]["notification_type_response"];
              created_timestamp: components["schemas"]["created_timestamp_response"];
              metadata?: {
                amount?: components["schemas"]["amount_response"];
                price?: components["schemas"]["price_response"];
                order_type?: components["schemas"]["order_type_response"];
                l1Token?: components["schemas"]["l1Token_response"];
                l2Token?: components["schemas"]["l2Token_response"];
                strike?: components["schemas"]["strike_response"];
                side?: components["schemas"]["side_response"];
                option_type?: components["schemas"]["option_type_response"];
                expiry?: components["schemas"]["expiry_response"];
                account?: components["schemas"]["account_response"];
                collateral?: components["schemas"]["collateral_response"];
                tx_hash?: components["schemas"]["tx_hash_response"];
                to?: components["schemas"]["to_response"];
                balance?: components["schemas"]["balance_response"];
                asset?: components["schemas"]["asset_response"];
                position_count?: components["schemas"]["position_count_response"];
                fees?: components["schemas"]["fees_response"];
                mmp_enabled?: components["schemas"]["mmp_enabled_response"];
                trigger?: components["schemas"]["trigger_response"];
                label?: components["schemas"]["label_response"];
                referee?: components["schemas"]["referee_response"];
                referrer?: components["schemas"]["referrer_response"];
                commission?: components["schemas"]["commission_response"];
                period?: components["schemas"]["period_response"];
                username?: components["schemas"]["username_response"];
                payout?: components["schemas"]["payout_response"];
                entry_price?: components["schemas"]["entry_price_response"];
                transfer_details?: {
                  description: components["schemas"]["description_response"];
                  link: components["schemas"]["link_response"];
                };
              };
            }[];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
  /**
   * INTERNAL POST /mark-as-read
   * @description Mark the notifications for the account as read.
   */
  PostMarkAsRead: {
    responses: {
      /** @description Read notifications. */
      200: {
        content: {
          "application/json": {
              account: components["schemas"]["account_response"];
              is_read: components["schemas"]["is_read_response"];
              notification_type: components["schemas"]["notification_type_response"];
              created_timestamp: components["schemas"]["created_timestamp_response"];
              metadata?: {
                amount?: components["schemas"]["amount_response"];
                price?: components["schemas"]["price_response"];
                strike?: components["schemas"]["strike_response"];
                side?: components["schemas"]["side_response"];
                option_type?: components["schemas"]["option_type_response"];
                expiry?: components["schemas"]["expiry_response"];
                account?: components["schemas"]["account_response"];
                collateral?: components["schemas"]["collateral_response"];
                tx_hash?: components["schemas"]["tx_hash_response"];
                to?: components["schemas"]["to_response"];
                balance?: components["schemas"]["balance_response"];
              };
            }[];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "application/json": {
            error: components["schemas"]["error_401_response"];
          };
        };
      };
      /** @description Rate limit exceeded. */
      429: {
        content: {
          "application/json": {
            error: components["schemas"]["error_429_response"];
          };
        };
      };
      /** @description Internal server error. */
      500: {
        content: {
          "application/json": {
            error: components["schemas"]["error_500_response"];
          };
        };
      };
    };
  };
}
